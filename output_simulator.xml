<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<program>
	<globals>
		<register name="CF" size="1"/>
		<register name="RSP" size="8"/>
		<register name="OF" size="1"/>
		<register name="SF" size="1"/>
		<register name="ZF" size="1"/>
		<register name="RAX" size="8"/>
		<register name="RIP" size="8"/>
		<register name="EBP" size="4"/>
		<register name="RBP" size="8"/>
		<register name="R9" size="8"/>
		<register name="RDX" size="8"/>
		<register name="RSI" size="8"/>
		<register name="R8" size="8"/>
		<register name="RCX" size="8"/>
		<register name="RDI" size="8"/>
		<register name="EAX" size="4"/>
		<register name="R15" size="8"/>
		<register name="R14" size="8"/>
		<register name="R13" size="8"/>
		<register name="R12" size="8"/>
		<register name="RBX" size="8"/>
		<register name="R13D" size="4"/>
		<register name="EDI" size="4"/>
		<register name="EBX" size="4"/>
	</globals>
	<memory>
		<memory name="A_00600ff8:8" size="8"/>
		<memory name="A_004003a2:8" size="8"/>
		<memory name="A_00600ff0:8" size="8"/>
		<memory name="A_004003da:8" size="8"/>
		<memory name="A_00400418:8" size="8"/>
		<memory name="A_00400458:8" size="8"/>
		<memory name="A_00601028:1" size="1"/>
		<memory name="A_00400480:8" size="8"/>
		<memory name="A_004003f0:8" size="8"/>
		<memory name="A_00400420:8" size="8"/>
		<memory name="A_00400390:8" size="8"/>
		<memory name="A_00400516:8" size="8"/>
		<memory name="A_00400500:8" size="8"/>
	</memory>
	<function address="00400390" name="_init">
		<basic_blocks>
			<block_0 end="004003a6" start="00400390"/>
		</basic_blocks>
		<output type="int"/>
		<input name="ctx" type="EVP_PKEY_CTX *"/>
		<instructions>
			<instruction_0>SUB RSP,0x8
				<address>00400390</address>
				<pcodes>
					<pcode_0>
						<output size="1" storage="register">CF</output>
						<name>INT_LESS</name>
						<inputs>
							<input_0 size="8" storage="register">RSP</input_0>
							<input_1 size="8" storage="constant">0x8</input_1></inputs>
					</pcode_0>
					<pcode_1>
						<output size="1" storage="register">OF</output>
						<name>INT_SBORROW</name>
						<inputs>
							<input_0 size="8" storage="register">RSP</input_0>
							<input_1 size="8" storage="constant">0x8</input_1>
						</inputs>
					</pcode_1>
					<pcode_2>
						<output size="8" storage="register">RSP</output>
						<name>INT_SUB</name>
						<inputs>
							<input_0 size="8" storage="register">RSP</input_0>
							<input_1 size="8" storage="constant">0x8</input_1>
						</inputs>
					</pcode_2>
					<pcode_3>
						<output size="1" storage="register">SF</output>
						<name>INT_SLESS</name>
						<inputs>
							<input_0 size="8" storage="register">RSP</input_0>
							<input_1 size="8" storage="constant">0x0</input_1>
						</inputs>
					</pcode_3>
					<pcode_4>
						<output size="1" storage="register">ZF</output>
						<name>INT_EQUAL</name>
						<inputs>
							<input_0 size="8" storage="register">RSP</input_0>
							<input_1 size="8" storage="constant">0x0</input_1>
						</inputs>
					</pcode_4>
				</pcodes>
			</instruction_0>
			<instruction_1>MOV RAX,qword ptr [0x00600ff8]
				<address>00400394</address>
				<pcodes>
					<pcode_0>
						<output size="8" storage="register">RAX</output>
						<name>COPY</name>
						<inputs>
							<input_0 size="8" storage="memory">A_00600ff8:8</input_0></inputs>
					</pcode_0>
				</pcodes>
			</instruction_1>
			<instruction_2>TEST RAX,RAX
				<address>0040039b</address>
				<pcodes>
					<pcode_0>
						<output size="1" storage="register">CF</output>
						<name>COPY</name>
						<inputs>
							<input_0 size="1" storage="constant">0x0</input_0></inputs>
					</pcode_0>
					<pcode_1>
						<output size="1" storage="register">OF</output>
						<name>COPY</name>
						<inputs>
							<input_0 size="1" storage="constant">0x0</input_0>
						</inputs>
					</pcode_1>
					<pcode_2>
						<output size="8" storage="unique">u_bbe0:8</output>
						<name>INT_AND</name>
						<inputs>
							<input_0 size="8" storage="register">RAX</input_0>
							<input_1 size="8" storage="register">RAX</input_1>
						</inputs>
					</pcode_2>
					<pcode_3>
						<output size="1" storage="register">SF</output>
						<name>INT_SLESS</name>
						<inputs>
							<input_0 size="8" storage="unique">u_bbe0:8</input_0>
							<input_1 size="8" storage="constant">0x0</input_1>
						</inputs>
					</pcode_3>
					<pcode_4>
						<output size="1" storage="register">ZF</output>
						<name>INT_EQUAL</name>
						<inputs>
							<input_0 size="8" storage="unique">u_bbe0:8</input_0>
							<input_1 size="8" storage="constant">0x0</input_1>
						</inputs>
					</pcode_4>
				</pcodes>
			</instruction_2>
			<instruction_3>JZ 0x004003a2
				<address>0040039e</address>
				<pcodes>
					<pcode_0>
						<name>CBRANCH</name>
						<inputs>
							<input_0 size="8" storage="memory">A_004003a2:8</input_0>
							<input_1 size="1" storage="register">ZF</input_1></inputs>
					</pcode_0>
				</pcodes>
			</instruction_3>
			<instruction_4>CALL RAX
				<address>004003a0</address>
				<pcodes>
					<pcode_0>
						<output size="8" storage="register">RSP</output>
						<name>INT_SUB</name>
						<inputs>
							<input_0 size="8" storage="register">RSP</input_0>
							<input_1 size="8" storage="constant">0x8</input_1></inputs>
					</pcode_0>
					<pcode_1>
						<name>STORE</name>
						<inputs>
							<input_0 size="8" storage="constant">0x1b1</input_0>
							<input_1 size="8" storage="register">RSP</input_1>
							<input_2 size="8" storage="constant">0x4003a2</input_2>
						</inputs>
					</pcode_1>
					<pcode_2>
						<name>CALLIND</name>
						<inputs>
							<input_0 size="8" storage="register">RAX</input_0>
						</inputs>
					</pcode_2>
				</pcodes>
			</instruction_4>
			<instruction_5>ADD RSP,0x8
				<address>004003a2</address>
				<pcodes>
					<pcode_0>
						<output size="1" storage="register">CF</output>
						<name>INT_CARRY</name>
						<inputs>
							<input_0 size="8" storage="register">RSP</input_0>
							<input_1 size="8" storage="constant">0x8</input_1></inputs>
					</pcode_0>
					<pcode_1>
						<output size="1" storage="register">OF</output>
						<name>INT_SCARRY</name>
						<inputs>
							<input_0 size="8" storage="register">RSP</input_0>
							<input_1 size="8" storage="constant">0x8</input_1>
						</inputs>
					</pcode_1>
					<pcode_2>
						<output size="8" storage="register">RSP</output>
						<name>INT_ADD</name>
						<inputs>
							<input_0 size="8" storage="register">RSP</input_0>
							<input_1 size="8" storage="constant">0x8</input_1>
						</inputs>
					</pcode_2>
					<pcode_3>
						<output size="1" storage="register">SF</output>
						<name>INT_SLESS</name>
						<inputs>
							<input_0 size="8" storage="register">RSP</input_0>
							<input_1 size="8" storage="constant">0x0</input_1>
						</inputs>
					</pcode_3>
					<pcode_4>
						<output size="1" storage="register">ZF</output>
						<name>INT_EQUAL</name>
						<inputs>
							<input_0 size="8" storage="register">RSP</input_0>
							<input_1 size="8" storage="constant">0x0</input_1>
						</inputs>
					</pcode_4>
				</pcodes>
			</instruction_5>
			<instruction_6>RET
				<address>004003a6</address>
				<pcodes>
					<pcode_0>
						<output size="8" storage="register">RIP</output>
						<name>LOAD</name>
						<inputs>
							<input_0 size="8" storage="constant">0x1b1</input_0>
							<input_1 size="8" storage="register">RSP</input_1></inputs>
					</pcode_0>
					<pcode_1>
						<output size="8" storage="register">RSP</output>
						<name>INT_ADD</name>
						<inputs>
							<input_0 size="8" storage="register">RSP</input_0>
							<input_1 size="8" storage="constant">0x8</input_1>
						</inputs>
					</pcode_1>
					<pcode_2>
						<name>RETURN</name>
						<inputs>
							<input_0 size="8" storage="register">RIP</input_0>
						</inputs>
					</pcode_2>
				</pcodes>
			</instruction_6>
		</instructions>
	</function>
	<function address="004003b0" name="_start">
		<basic_blocks>
			<block_0 end="004003d4" start="004003b0"/>
			<block_1 end="004003da" start="004003da"/>
		</basic_blocks>
		<output type="undefined"/>
		<instructions>
			<instruction_0>XOR EBP,EBP
				<address>004003b0</address>
				<pcodes>
					<pcode_0>
						<output size="1" storage="register">CF</output>
						<name>COPY</name>
						<inputs>
							<input_0 size="1" storage="constant">0x0</input_0></inputs>
					</pcode_0>
					<pcode_1>
						<output size="1" storage="register">OF</output>
						<name>COPY</name>
						<inputs>
							<input_0 size="1" storage="constant">0x0</input_0>
						</inputs>
					</pcode_1>
					<pcode_2>
						<output size="4" storage="register">EBP</output>
						<name>INT_XOR</name>
						<inputs>
							<input_0 size="4" storage="register">EBP</input_0>
							<input_1 size="4" storage="register">EBP</input_1>
						</inputs>
					</pcode_2>
					<pcode_3>
						<output size="8" storage="register">RBP</output>
						<name>INT_ZEXT</name>
						<inputs>
							<input_0 size="4" storage="register">EBP</input_0>
						</inputs>
					</pcode_3>
					<pcode_4>
						<output size="1" storage="register">SF</output>
						<name>INT_SLESS</name>
						<inputs>
							<input_0 size="4" storage="register">EBP</input_0>
							<input_1 size="4" storage="constant">0x0</input_1>
						</inputs>
					</pcode_4>
					<pcode_5>
						<output size="1" storage="register">ZF</output>
						<name>INT_EQUAL</name>
						<inputs>
							<input_0 size="4" storage="register">EBP</input_0>
							<input_1 size="4" storage="constant">0x0</input_1>
						</inputs>
					</pcode_5>
				</pcodes>
			</instruction_0>
			<instruction_1>MOV R9,RDX
				<address>004003b2</address>
				<pcodes>
					<pcode_0>
						<output size="8" storage="register">R9</output>
						<name>COPY</name>
						<inputs>
							<input_0 size="8" storage="register">RDX</input_0></inputs>
					</pcode_0>
				</pcodes>
			</instruction_1>
			<instruction_2>POP RSI
				<address>004003b5</address>
				<pcodes>
					<pcode_0>
						<output size="8" storage="register">RSI</output>
						<name>LOAD</name>
						<inputs>
							<input_0 size="8" storage="constant">0x1b1</input_0>
							<input_1 size="8" storage="register">RSP</input_1></inputs>
					</pcode_0>
					<pcode_1>
						<output size="8" storage="register">RSP</output>
						<name>INT_ADD</name>
						<inputs>
							<input_0 size="8" storage="register">RSP</input_0>
							<input_1 size="8" storage="constant">0x8</input_1>
						</inputs>
					</pcode_1>
				</pcodes>
			</instruction_2>
			<instruction_3>MOV RDX,RSP
				<address>004003b6</address>
				<pcodes>
					<pcode_0>
						<output size="8" storage="register">RDX</output>
						<name>COPY</name>
						<inputs>
							<input_0 size="8" storage="register">RSP</input_0></inputs>
					</pcode_0>
				</pcodes>
			</instruction_3>
			<instruction_4>AND RSP,-0x10
				<address>004003b9</address>
				<pcodes>
					<pcode_0>
						<output size="1" storage="register">CF</output>
						<name>COPY</name>
						<inputs>
							<input_0 size="1" storage="constant">0x0</input_0></inputs>
					</pcode_0>
					<pcode_1>
						<output size="1" storage="register">OF</output>
						<name>COPY</name>
						<inputs>
							<input_0 size="1" storage="constant">0x0</input_0>
						</inputs>
					</pcode_1>
					<pcode_2>
						<output size="8" storage="register">RSP</output>
						<name>INT_AND</name>
						<inputs>
							<input_0 size="8" storage="register">RSP</input_0>
							<input_1 size="8" storage="constant">0xfffffffffffffff0</input_1>
						</inputs>
					</pcode_2>
					<pcode_3>
						<output size="1" storage="register">SF</output>
						<name>INT_SLESS</name>
						<inputs>
							<input_0 size="8" storage="register">RSP</input_0>
							<input_1 size="8" storage="constant">0x0</input_1>
						</inputs>
					</pcode_3>
					<pcode_4>
						<output size="1" storage="register">ZF</output>
						<name>INT_EQUAL</name>
						<inputs>
							<input_0 size="8" storage="register">RSP</input_0>
							<input_1 size="8" storage="constant">0x0</input_1>
						</inputs>
					</pcode_4>
				</pcodes>
			</instruction_4>
			<instruction_5>PUSH RAX
				<address>004003bd</address>
				<pcodes>
					<pcode_0>
						<output size="8" storage="unique">u_2510:8</output>
						<name>COPY</name>
						<inputs>
							<input_0 size="8" storage="register">RAX</input_0></inputs>
					</pcode_0>
					<pcode_1>
						<output size="8" storage="register">RSP</output>
						<name>INT_SUB</name>
						<inputs>
							<input_0 size="8" storage="register">RSP</input_0>
							<input_1 size="8" storage="constant">0x8</input_1>
						</inputs>
					</pcode_1>
					<pcode_2>
						<name>STORE</name>
						<inputs>
							<input_0 size="8" storage="constant">0x1b1</input_0>
							<input_1 size="8" storage="register">RSP</input_1>
							<input_2 size="8" storage="unique">u_2510:8</input_2>
						</inputs>
					</pcode_2>
				</pcodes>
			</instruction_5>
			<instruction_6>PUSH RSP
				<address>004003be</address>
				<pcodes>
					<pcode_0>
						<output size="8" storage="unique">u_2510:8</output>
						<name>COPY</name>
						<inputs>
							<input_0 size="8" storage="register">RSP</input_0></inputs>
					</pcode_0>
					<pcode_1>
						<output size="8" storage="register">RSP</output>
						<name>INT_SUB</name>
						<inputs>
							<input_0 size="8" storage="register">RSP</input_0>
							<input_1 size="8" storage="constant">0x8</input_1>
						</inputs>
					</pcode_1>
					<pcode_2>
						<name>STORE</name>
						<inputs>
							<input_0 size="8" storage="constant">0x1b1</input_0>
							<input_1 size="8" storage="register">RSP</input_1>
							<input_2 size="8" storage="unique">u_2510:8</input_2>
						</inputs>
					</pcode_2>
				</pcodes>
			</instruction_6>
			<instruction_7>MOV R8,0x400530
				<address>004003bf</address>
				<pcodes>
					<pcode_0>
						<output size="8" storage="register">R8</output>
						<name>COPY</name>
						<inputs>
							<input_0 size="8" storage="constant">0x400530</input_0></inputs>
					</pcode_0>
				</pcodes>
			</instruction_7>
			<instruction_8>MOV RCX,0x4004c0
				<address>004003c6</address>
				<pcodes>
					<pcode_0>
						<output size="8" storage="register">RCX</output>
						<name>COPY</name>
						<inputs>
							<input_0 size="8" storage="constant">0x4004c0</input_0></inputs>
					</pcode_0>
				</pcodes>
			</instruction_8>
			<instruction_9>MOV RDI,0x4004b0
				<address>004003cd</address>
				<pcodes>
					<pcode_0>
						<output size="8" storage="register">RDI</output>
						<name>COPY</name>
						<inputs>
							<input_0 size="8" storage="constant">0x4004b0</input_0></inputs>
					</pcode_0>
				</pcodes>
			</instruction_9>
			<instruction_10>CALL qword ptr [0x00600ff0]
				<address>004003d4</address>
				<pcodes>
					<pcode_0>
						<output size="8" storage="register">RSP</output>
						<name>INT_SUB</name>
						<inputs>
							<input_0 size="8" storage="register">RSP</input_0>
							<input_1 size="8" storage="constant">0x8</input_1></inputs>
					</pcode_0>
					<pcode_1>
						<name>STORE</name>
						<inputs>
							<input_0 size="8" storage="constant">0x1b1</input_0>
							<input_1 size="8" storage="register">RSP</input_1>
							<input_2 size="8" storage="constant">0x4003da</input_2>
						</inputs>
					</pcode_1>
					<pcode_2>
						<name>CALLIND</name>
						<inputs>
							<input_0 size="8" storage="memory">A_00600ff0:8</input_0>
						</inputs>
					</pcode_2>
				</pcodes>
			</instruction_10>
			<instruction_11>HLT
				<address>004003da</address>
				<pcodes>
					<pcode_0>
						<name>BRANCH</name>
						<inputs>
							<input_0 size="8" storage="memory">A_004003da:8</input_0></inputs>
					</pcode_0>
				</pcodes>
			</instruction_11>
			<instruction_12>RET
				<address>004003e0</address>
				<pcodes>
					<pcode_0>
						<output size="8" storage="register">RIP</output>
						<name>LOAD</name>
						<inputs>
							<input_0 size="8" storage="constant">0x1b1</input_0>
							<input_1 size="8" storage="register">RSP</input_1></inputs>
					</pcode_0>
					<pcode_1>
						<output size="8" storage="register">RSP</output>
						<name>INT_ADD</name>
						<inputs>
							<input_0 size="8" storage="register">RSP</input_0>
							<input_1 size="8" storage="constant">0x8</input_1>
						</inputs>
					</pcode_1>
					<pcode_2>
						<name>RETURN</name>
						<inputs>
							<input_0 size="8" storage="register">RIP</input_0>
						</inputs>
					</pcode_2>
				</pcodes>
			</instruction_12>
		</instructions>
	</function>
	<function address="004003e0" name="_dl_relocate_static_pie">
		<basic_blocks>
			<block_0 end="004003e0" start="004003e0"/>
		</basic_blocks>
		<output type="undefined"/>
		<instructions>
			<instruction_0>RET
				<address>004003e0</address>
				<pcodes>
					<pcode_0>
						<output size="8" storage="register">RIP</output>
						<name>LOAD</name>
						<inputs>
							<input_0 size="8" storage="constant">0x1b1</input_0>
							<input_1 size="8" storage="register">RSP</input_1></inputs>
					</pcode_0>
					<pcode_1>
						<output size="8" storage="register">RSP</output>
						<name>INT_ADD</name>
						<inputs>
							<input_0 size="8" storage="register">RSP</input_0>
							<input_1 size="8" storage="constant">0x8</input_1>
						</inputs>
					</pcode_1>
					<pcode_2>
						<name>RETURN</name>
						<inputs>
							<input_0 size="8" storage="register">RIP</input_0>
						</inputs>
					</pcode_2>
				</pcodes>
			</instruction_0>
		</instructions>
	</function>
	<function address="004003f0" name="deregister_tm_clones">
		<basic_blocks>
			<block_0 end="00400419" start="004003f0"/>
		</basic_blocks>
		<output type="undefined"/>
		<instructions>
			<instruction_0>PUSH RBP
				<address>004003f0</address>
				<pcodes>
					<pcode_0>
						<output size="8" storage="unique">u_2510:8</output>
						<name>COPY</name>
						<inputs>
							<input_0 size="8" storage="register">RBP</input_0></inputs>
					</pcode_0>
					<pcode_1>
						<output size="8" storage="register">RSP</output>
						<name>INT_SUB</name>
						<inputs>
							<input_0 size="8" storage="register">RSP</input_0>
							<input_1 size="8" storage="constant">0x8</input_1>
						</inputs>
					</pcode_1>
					<pcode_2>
						<name>STORE</name>
						<inputs>
							<input_0 size="8" storage="constant">0x1b1</input_0>
							<input_1 size="8" storage="register">RSP</input_1>
							<input_2 size="8" storage="unique">u_2510:8</input_2>
						</inputs>
					</pcode_2>
				</pcodes>
			</instruction_0>
			<instruction_1>MOV EAX,0x601028
				<address>004003f1</address>
				<pcodes>
					<pcode_0>
						<output size="8" storage="register">RAX</output>
						<name>COPY</name>
						<inputs>
							<input_0 size="8" storage="constant">0x601028</input_0></inputs>
					</pcode_0>
				</pcodes>
			</instruction_1>
			<instruction_2>CMP RAX,0x601028
				<address>004003f6</address>
				<pcodes>
					<pcode_0>
						<output size="1" storage="register">CF</output>
						<name>INT_LESS</name>
						<inputs>
							<input_0 size="8" storage="register">RAX</input_0>
							<input_1 size="8" storage="constant">0x601028</input_1></inputs>
					</pcode_0>
					<pcode_1>
						<output size="1" storage="register">OF</output>
						<name>INT_SBORROW</name>
						<inputs>
							<input_0 size="8" storage="register">RAX</input_0>
							<input_1 size="8" storage="constant">0x601028</input_1>
						</inputs>
					</pcode_1>
					<pcode_2>
						<output size="8" storage="unique">u_5890:8</output>
						<name>INT_SUB</name>
						<inputs>
							<input_0 size="8" storage="register">RAX</input_0>
							<input_1 size="8" storage="constant">0x601028</input_1>
						</inputs>
					</pcode_2>
					<pcode_3>
						<output size="1" storage="register">SF</output>
						<name>INT_SLESS</name>
						<inputs>
							<input_0 size="8" storage="unique">u_5890:8</input_0>
							<input_1 size="8" storage="constant">0x0</input_1>
						</inputs>
					</pcode_3>
					<pcode_4>
						<output size="1" storage="register">ZF</output>
						<name>INT_EQUAL</name>
						<inputs>
							<input_0 size="8" storage="unique">u_5890:8</input_0>
							<input_1 size="8" storage="constant">0x0</input_1>
						</inputs>
					</pcode_4>
				</pcodes>
			</instruction_2>
			<instruction_3>MOV RBP,RSP
				<address>004003fc</address>
				<pcodes>
					<pcode_0>
						<output size="8" storage="register">RBP</output>
						<name>COPY</name>
						<inputs>
							<input_0 size="8" storage="register">RSP</input_0></inputs>
					</pcode_0>
				</pcodes>
			</instruction_3>
			<instruction_4>JZ 0x00400418
				<address>004003ff</address>
				<pcodes>
					<pcode_0>
						<name>CBRANCH</name>
						<inputs>
							<input_0 size="8" storage="memory">A_00400418:8</input_0>
							<input_1 size="1" storage="register">ZF</input_1></inputs>
					</pcode_0>
				</pcodes>
			</instruction_4>
			<instruction_5>MOV EAX,0x0
				<address>00400401</address>
				<pcodes>
					<pcode_0>
						<output size="8" storage="register">RAX</output>
						<name>COPY</name>
						<inputs>
							<input_0 size="8" storage="constant">0x0</input_0></inputs>
					</pcode_0>
				</pcodes>
			</instruction_5>
			<instruction_6>TEST RAX,RAX
				<address>00400406</address>
				<pcodes>
					<pcode_0>
						<output size="1" storage="register">CF</output>
						<name>COPY</name>
						<inputs>
							<input_0 size="1" storage="constant">0x0</input_0></inputs>
					</pcode_0>
					<pcode_1>
						<output size="1" storage="register">OF</output>
						<name>COPY</name>
						<inputs>
							<input_0 size="1" storage="constant">0x0</input_0>
						</inputs>
					</pcode_1>
					<pcode_2>
						<output size="8" storage="unique">u_bbe0:8</output>
						<name>INT_AND</name>
						<inputs>
							<input_0 size="8" storage="register">RAX</input_0>
							<input_1 size="8" storage="register">RAX</input_1>
						</inputs>
					</pcode_2>
					<pcode_3>
						<output size="1" storage="register">SF</output>
						<name>INT_SLESS</name>
						<inputs>
							<input_0 size="8" storage="unique">u_bbe0:8</input_0>
							<input_1 size="8" storage="constant">0x0</input_1>
						</inputs>
					</pcode_3>
					<pcode_4>
						<output size="1" storage="register">ZF</output>
						<name>INT_EQUAL</name>
						<inputs>
							<input_0 size="8" storage="unique">u_bbe0:8</input_0>
							<input_1 size="8" storage="constant">0x0</input_1>
						</inputs>
					</pcode_4>
				</pcodes>
			</instruction_6>
			<instruction_7>JZ 0x00400418
				<address>00400409</address>
				<pcodes>
					<pcode_0>
						<name>CBRANCH</name>
						<inputs>
							<input_0 size="8" storage="memory">A_00400418:8</input_0>
							<input_1 size="1" storage="register">ZF</input_1></inputs>
					</pcode_0>
				</pcodes>
			</instruction_7>
			<instruction_8>POP RBP
				<address>0040040b</address>
				<pcodes>
					<pcode_0>
						<output size="8" storage="register">RBP</output>
						<name>LOAD</name>
						<inputs>
							<input_0 size="8" storage="constant">0x1b1</input_0>
							<input_1 size="8" storage="register">RSP</input_1></inputs>
					</pcode_0>
					<pcode_1>
						<output size="8" storage="register">RSP</output>
						<name>INT_ADD</name>
						<inputs>
							<input_0 size="8" storage="register">RSP</input_0>
							<input_1 size="8" storage="constant">0x8</input_1>
						</inputs>
					</pcode_1>
				</pcodes>
			</instruction_8>
			<instruction_9>MOV EDI,0x601028
				<address>0040040c</address>
				<pcodes>
					<pcode_0>
						<output size="8" storage="register">RDI</output>
						<name>COPY</name>
						<inputs>
							<input_0 size="8" storage="constant">0x601028</input_0></inputs>
					</pcode_0>
				</pcodes>
			</instruction_9>
			<instruction_10>JMP RAX
				<address>00400411</address>
				<pcodes>
					<pcode_0>
						<name>BRANCHIND</name>
						<inputs>
							<input_0 size="8" storage="register">RAX</input_0></inputs>
					</pcode_0>
				</pcodes>
			</instruction_10>
			<instruction_11>POP RBP
				<address>00400418</address>
				<pcodes>
					<pcode_0>
						<output size="8" storage="register">RBP</output>
						<name>LOAD</name>
						<inputs>
							<input_0 size="8" storage="constant">0x1b1</input_0>
							<input_1 size="8" storage="register">RSP</input_1></inputs>
					</pcode_0>
					<pcode_1>
						<output size="8" storage="register">RSP</output>
						<name>INT_ADD</name>
						<inputs>
							<input_0 size="8" storage="register">RSP</input_0>
							<input_1 size="8" storage="constant">0x8</input_1>
						</inputs>
					</pcode_1>
				</pcodes>
			</instruction_11>
			<instruction_12>RET
				<address>00400419</address>
				<pcodes>
					<pcode_0>
						<output size="8" storage="register">RIP</output>
						<name>LOAD</name>
						<inputs>
							<input_0 size="8" storage="constant">0x1b1</input_0>
							<input_1 size="8" storage="register">RSP</input_1></inputs>
					</pcode_0>
					<pcode_1>
						<output size="8" storage="register">RSP</output>
						<name>INT_ADD</name>
						<inputs>
							<input_0 size="8" storage="register">RSP</input_0>
							<input_1 size="8" storage="constant">0x8</input_1>
						</inputs>
					</pcode_1>
					<pcode_2>
						<name>RETURN</name>
						<inputs>
							<input_0 size="8" storage="register">RIP</input_0>
						</inputs>
					</pcode_2>
				</pcodes>
			</instruction_12>
		</instructions>
	</function>
	<function address="00400420" name="register_tm_clones">
		<basic_blocks>
			<block_0 end="00400459" start="00400420"/>
		</basic_blocks>
		<output type="undefined"/>
		<instructions>
			<instruction_0>MOV ESI,0x601028
				<address>00400420</address>
				<pcodes>
					<pcode_0>
						<output size="8" storage="register">RSI</output>
						<name>COPY</name>
						<inputs>
							<input_0 size="8" storage="constant">0x601028</input_0></inputs>
					</pcode_0>
				</pcodes>
			</instruction_0>
			<instruction_1>PUSH RBP
				<address>00400425</address>
				<pcodes>
					<pcode_0>
						<output size="8" storage="unique">u_2510:8</output>
						<name>COPY</name>
						<inputs>
							<input_0 size="8" storage="register">RBP</input_0></inputs>
					</pcode_0>
					<pcode_1>
						<output size="8" storage="register">RSP</output>
						<name>INT_SUB</name>
						<inputs>
							<input_0 size="8" storage="register">RSP</input_0>
							<input_1 size="8" storage="constant">0x8</input_1>
						</inputs>
					</pcode_1>
					<pcode_2>
						<name>STORE</name>
						<inputs>
							<input_0 size="8" storage="constant">0x1b1</input_0>
							<input_1 size="8" storage="register">RSP</input_1>
							<input_2 size="8" storage="unique">u_2510:8</input_2>
						</inputs>
					</pcode_2>
				</pcodes>
			</instruction_1>
			<instruction_2>SUB RSI,0x601028
				<address>00400426</address>
				<pcodes>
					<pcode_0>
						<output size="1" storage="register">CF</output>
						<name>INT_LESS</name>
						<inputs>
							<input_0 size="8" storage="register">RSI</input_0>
							<input_1 size="8" storage="constant">0x601028</input_1></inputs>
					</pcode_0>
					<pcode_1>
						<output size="1" storage="register">OF</output>
						<name>INT_SBORROW</name>
						<inputs>
							<input_0 size="8" storage="register">RSI</input_0>
							<input_1 size="8" storage="constant">0x601028</input_1>
						</inputs>
					</pcode_1>
					<pcode_2>
						<output size="8" storage="register">RSI</output>
						<name>INT_SUB</name>
						<inputs>
							<input_0 size="8" storage="register">RSI</input_0>
							<input_1 size="8" storage="constant">0x601028</input_1>
						</inputs>
					</pcode_2>
					<pcode_3>
						<output size="1" storage="register">SF</output>
						<name>INT_SLESS</name>
						<inputs>
							<input_0 size="8" storage="register">RSI</input_0>
							<input_1 size="8" storage="constant">0x0</input_1>
						</inputs>
					</pcode_3>
					<pcode_4>
						<output size="1" storage="register">ZF</output>
						<name>INT_EQUAL</name>
						<inputs>
							<input_0 size="8" storage="register">RSI</input_0>
							<input_1 size="8" storage="constant">0x0</input_1>
						</inputs>
					</pcode_4>
				</pcodes>
			</instruction_2>
			<instruction_3>MOV RBP,RSP
				<address>0040042d</address>
				<pcodes>
					<pcode_0>
						<output size="8" storage="register">RBP</output>
						<name>COPY</name>
						<inputs>
							<input_0 size="8" storage="register">RSP</input_0></inputs>
					</pcode_0>
				</pcodes>
			</instruction_3>
			<instruction_4>SAR RSI,0x3
				<address>00400430</address>
				<pcodes>
					<pcode_0>
						<output size="4" storage="unique">u_acf0:4</output>
						<name>INT_AND</name>
						<inputs>
							<input_0 size="4" storage="constant">0x3</input_0>
							<input_1 size="4" storage="constant">0x3f</input_1></inputs>
					</pcode_0>
					<pcode_1>
						<output size="8" storage="unique">u_ad00:8</output>
						<name>COPY</name>
						<inputs>
							<input_0 size="8" storage="register">RSI</input_0>
						</inputs>
					</pcode_1>
					<pcode_2>
						<output size="8" storage="register">RSI</output>
						<name>INT_SRIGHT</name>
						<inputs>
							<input_0 size="8" storage="register">RSI</input_0>
							<input_1 size="4" storage="unique">u_acf0:4</input_1>
						</inputs>
					</pcode_2>
					<pcode_3>
						<output size="1" storage="unique">u_3380:1</output>
						<name>INT_NOTEQUAL</name>
						<inputs>
							<input_0 size="4" storage="unique">u_acf0:4</input_0>
							<input_1 size="4" storage="constant">0x0</input_1>
						</inputs>
					</pcode_3>
					<pcode_4>
						<output size="4" storage="unique">u_3390:4</output>
						<name>INT_SUB</name>
						<inputs>
							<input_0 size="4" storage="unique">u_acf0:4</input_0>
							<input_1 size="4" storage="constant">0x1</input_1>
						</inputs>
					</pcode_4>
					<pcode_5>
						<output size="8" storage="unique">u_33a0:8</output>
						<name>INT_SRIGHT</name>
						<inputs>
							<input_0 size="8" storage="unique">u_ad00:8</input_0>
							<input_1 size="4" storage="unique">u_3390:4</input_1>
						</inputs>
					</pcode_5>
					<pcode_6>
						<output size="8" storage="unique">u_33b0:8</output>
						<name>INT_AND</name>
						<inputs>
							<input_0 size="8" storage="unique">u_33a0:8</input_0>
							<input_1 size="8" storage="constant">0x1</input_1>
						</inputs>
					</pcode_6>
					<pcode_7>
						<output size="1" storage="unique">u_33d0:1</output>
						<name>INT_NOTEQUAL</name>
						<inputs>
							<input_0 size="8" storage="unique">u_33b0:8</input_0>
							<input_1 size="8" storage="constant">0x0</input_1>
						</inputs>
					</pcode_7>
					<pcode_8>
						<output size="1" storage="unique">u_33e0:1</output>
						<name>BOOL_NEGATE</name>
						<inputs>
							<input_0 size="1" storage="unique">u_3380:1</input_0>
						</inputs>
					</pcode_8>
					<pcode_9>
						<output size="1" storage="unique">u_33f0:1</output>
						<name>INT_AND</name>
						<inputs>
							<input_0 size="1" storage="unique">u_33e0:1</input_0>
							<input_1 size="1" storage="register">CF</input_1>
						</inputs>
					</pcode_9>
					<pcode_10>
						<output size="1" storage="unique">u_3400:1</output>
						<name>INT_AND</name>
						<inputs>
							<input_0 size="1" storage="unique">u_3380:1</input_0>
							<input_1 size="1" storage="unique">u_33d0:1</input_1>
						</inputs>
					</pcode_10>
					<pcode_11>
						<output size="1" storage="register">CF</output>
						<name>INT_OR</name>
						<inputs>
							<input_0 size="1" storage="unique">u_33f0:1</input_0>
							<input_1 size="1" storage="unique">u_3400:1</input_1>
						</inputs>
					</pcode_11>
					<pcode_12>
						<output size="1" storage="unique">u_3430:1</output>
						<name>INT_EQUAL</name>
						<inputs>
							<input_0 size="4" storage="unique">u_acf0:4</input_0>
							<input_1 size="4" storage="constant">0x1</input_1>
						</inputs>
					</pcode_12>
					<pcode_13>
						<output size="1" storage="unique">u_3440:1</output>
						<name>BOOL_NEGATE</name>
						<inputs>
							<input_0 size="1" storage="unique">u_3430:1</input_0>
						</inputs>
					</pcode_13>
					<pcode_14>
						<output size="1" storage="register">OF</output>
						<name>INT_AND</name>
						<inputs>
							<input_0 size="1" storage="unique">u_3440:1</input_0>
							<input_1 size="1" storage="register">OF</input_1>
						</inputs>
					</pcode_14>
					<pcode_15>
						<output size="1" storage="unique">u_2e90:1</output>
						<name>INT_NOTEQUAL</name>
						<inputs>
							<input_0 size="4" storage="unique">u_acf0:4</input_0>
							<input_1 size="4" storage="constant">0x0</input_1>
						</inputs>
					</pcode_15>
					<pcode_16>
						<output size="1" storage="unique">u_2eb0:1</output>
						<name>INT_SLESS</name>
						<inputs>
							<input_0 size="8" storage="register">RSI</input_0>
							<input_1 size="8" storage="constant">0x0</input_1>
						</inputs>
					</pcode_16>
					<pcode_17>
						<output size="1" storage="unique">u_2ec0:1</output>
						<name>BOOL_NEGATE</name>
						<inputs>
							<input_0 size="1" storage="unique">u_2e90:1</input_0>
						</inputs>
					</pcode_17>
					<pcode_18>
						<output size="1" storage="unique">u_2ed0:1</output>
						<name>INT_AND</name>
						<inputs>
							<input_0 size="1" storage="unique">u_2ec0:1</input_0>
							<input_1 size="1" storage="register">SF</input_1>
						</inputs>
					</pcode_18>
					<pcode_19>
						<output size="1" storage="unique">u_2ee0:1</output>
						<name>INT_AND</name>
						<inputs>
							<input_0 size="1" storage="unique">u_2e90:1</input_0>
							<input_1 size="1" storage="unique">u_2eb0:1</input_1>
						</inputs>
					</pcode_19>
					<pcode_20>
						<output size="1" storage="register">SF</output>
						<name>INT_OR</name>
						<inputs>
							<input_0 size="1" storage="unique">u_2ed0:1</input_0>
							<input_1 size="1" storage="unique">u_2ee0:1</input_1>
						</inputs>
					</pcode_20>
					<pcode_21>
						<output size="1" storage="unique">u_2f10:1</output>
						<name>INT_EQUAL</name>
						<inputs>
							<input_0 size="8" storage="register">RSI</input_0>
							<input_1 size="8" storage="constant">0x0</input_1>
						</inputs>
					</pcode_21>
					<pcode_22>
						<output size="1" storage="unique">u_2f20:1</output>
						<name>BOOL_NEGATE</name>
						<inputs>
							<input_0 size="1" storage="unique">u_2e90:1</input_0>
						</inputs>
					</pcode_22>
					<pcode_23>
						<output size="1" storage="unique">u_2f30:1</output>
						<name>INT_AND</name>
						<inputs>
							<input_0 size="1" storage="unique">u_2f20:1</input_0>
							<input_1 size="1" storage="register">ZF</input_1>
						</inputs>
					</pcode_23>
					<pcode_24>
						<output size="1" storage="unique">u_2f40:1</output>
						<name>INT_AND</name>
						<inputs>
							<input_0 size="1" storage="unique">u_2e90:1</input_0>
							<input_1 size="1" storage="unique">u_2f10:1</input_1>
						</inputs>
					</pcode_24>
					<pcode_25>
						<output size="1" storage="register">ZF</output>
						<name>INT_OR</name>
						<inputs>
							<input_0 size="1" storage="unique">u_2f30:1</input_0>
							<input_1 size="1" storage="unique">u_2f40:1</input_1>
						</inputs>
					</pcode_25>
				</pcodes>
			</instruction_4>
			<instruction_5>MOV RAX,RSI
				<address>00400434</address>
				<pcodes>
					<pcode_0>
						<output size="8" storage="register">RAX</output>
						<name>COPY</name>
						<inputs>
							<input_0 size="8" storage="register">RSI</input_0></inputs>
					</pcode_0>
				</pcodes>
			</instruction_5>
			<instruction_6>SHR RAX,0x3f
				<address>00400437</address>
				<pcodes>
					<pcode_0>
						<output size="4" storage="unique">u_b890:4</output>
						<name>INT_AND</name>
						<inputs>
							<input_0 size="4" storage="constant">0x3f</input_0>
							<input_1 size="4" storage="constant">0x3f</input_1></inputs>
					</pcode_0>
					<pcode_1>
						<output size="8" storage="unique">u_b8a0:8</output>
						<name>COPY</name>
						<inputs>
							<input_0 size="8" storage="register">RAX</input_0>
						</inputs>
					</pcode_1>
					<pcode_2>
						<output size="8" storage="register">RAX</output>
						<name>INT_RIGHT</name>
						<inputs>
							<input_0 size="8" storage="register">RAX</input_0>
							<input_1 size="4" storage="unique">u_b890:4</input_1>
						</inputs>
					</pcode_2>
					<pcode_3>
						<output size="1" storage="unique">u_3470:1</output>
						<name>INT_NOTEQUAL</name>
						<inputs>
							<input_0 size="4" storage="unique">u_b890:4</input_0>
							<input_1 size="4" storage="constant">0x0</input_1>
						</inputs>
					</pcode_3>
					<pcode_4>
						<output size="4" storage="unique">u_3480:4</output>
						<name>INT_SUB</name>
						<inputs>
							<input_0 size="4" storage="unique">u_b890:4</input_0>
							<input_1 size="4" storage="constant">0x1</input_1>
						</inputs>
					</pcode_4>
					<pcode_5>
						<output size="8" storage="unique">u_3490:8</output>
						<name>INT_RIGHT</name>
						<inputs>
							<input_0 size="8" storage="unique">u_b8a0:8</input_0>
							<input_1 size="4" storage="unique">u_3480:4</input_1>
						</inputs>
					</pcode_5>
					<pcode_6>
						<output size="8" storage="unique">u_34a0:8</output>
						<name>INT_AND</name>
						<inputs>
							<input_0 size="8" storage="unique">u_3490:8</input_0>
							<input_1 size="8" storage="constant">0x1</input_1>
						</inputs>
					</pcode_6>
					<pcode_7>
						<output size="1" storage="unique">u_34c0:1</output>
						<name>INT_NOTEQUAL</name>
						<inputs>
							<input_0 size="8" storage="unique">u_34a0:8</input_0>
							<input_1 size="8" storage="constant">0x0</input_1>
						</inputs>
					</pcode_7>
					<pcode_8>
						<output size="1" storage="unique">u_34d0:1</output>
						<name>BOOL_NEGATE</name>
						<inputs>
							<input_0 size="1" storage="unique">u_3470:1</input_0>
						</inputs>
					</pcode_8>
					<pcode_9>
						<output size="1" storage="unique">u_34e0:1</output>
						<name>INT_AND</name>
						<inputs>
							<input_0 size="1" storage="unique">u_34d0:1</input_0>
							<input_1 size="1" storage="register">CF</input_1>
						</inputs>
					</pcode_9>
					<pcode_10>
						<output size="1" storage="unique">u_34f0:1</output>
						<name>INT_AND</name>
						<inputs>
							<input_0 size="1" storage="unique">u_3470:1</input_0>
							<input_1 size="1" storage="unique">u_34c0:1</input_1>
						</inputs>
					</pcode_10>
					<pcode_11>
						<output size="1" storage="register">CF</output>
						<name>INT_OR</name>
						<inputs>
							<input_0 size="1" storage="unique">u_34e0:1</input_0>
							<input_1 size="1" storage="unique">u_34f0:1</input_1>
						</inputs>
					</pcode_11>
					<pcode_12>
						<output size="1" storage="unique">u_3520:1</output>
						<name>INT_EQUAL</name>
						<inputs>
							<input_0 size="4" storage="unique">u_b890:4</input_0>
							<input_1 size="4" storage="constant">0x1</input_1>
						</inputs>
					</pcode_12>
					<pcode_13>
						<output size="1" storage="unique">u_3540:1</output>
						<name>INT_SLESS</name>
						<inputs>
							<input_0 size="8" storage="unique">u_b8a0:8</input_0>
							<input_1 size="8" storage="constant">0x0</input_1>
						</inputs>
					</pcode_13>
					<pcode_14>
						<output size="1" storage="unique">u_3550:1</output>
						<name>BOOL_NEGATE</name>
						<inputs>
							<input_0 size="1" storage="unique">u_3520:1</input_0>
						</inputs>
					</pcode_14>
					<pcode_15>
						<output size="1" storage="unique">u_3560:1</output>
						<name>INT_AND</name>
						<inputs>
							<input_0 size="1" storage="unique">u_3550:1</input_0>
							<input_1 size="1" storage="register">OF</input_1>
						</inputs>
					</pcode_15>
					<pcode_16>
						<output size="1" storage="unique">u_3570:1</output>
						<name>INT_AND</name>
						<inputs>
							<input_0 size="1" storage="unique">u_3520:1</input_0>
							<input_1 size="1" storage="unique">u_3540:1</input_1>
						</inputs>
					</pcode_16>
					<pcode_17>
						<output size="1" storage="register">OF</output>
						<name>INT_OR</name>
						<inputs>
							<input_0 size="1" storage="unique">u_3560:1</input_0>
							<input_1 size="1" storage="unique">u_3570:1</input_1>
						</inputs>
					</pcode_17>
					<pcode_18>
						<output size="1" storage="unique">u_2e90:1</output>
						<name>INT_NOTEQUAL</name>
						<inputs>
							<input_0 size="4" storage="unique">u_b890:4</input_0>
							<input_1 size="4" storage="constant">0x0</input_1>
						</inputs>
					</pcode_18>
					<pcode_19>
						<output size="1" storage="unique">u_2eb0:1</output>
						<name>INT_SLESS</name>
						<inputs>
							<input_0 size="8" storage="register">RAX</input_0>
							<input_1 size="8" storage="constant">0x0</input_1>
						</inputs>
					</pcode_19>
					<pcode_20>
						<output size="1" storage="unique">u_2ec0:1</output>
						<name>BOOL_NEGATE</name>
						<inputs>
							<input_0 size="1" storage="unique">u_2e90:1</input_0>
						</inputs>
					</pcode_20>
					<pcode_21>
						<output size="1" storage="unique">u_2ed0:1</output>
						<name>INT_AND</name>
						<inputs>
							<input_0 size="1" storage="unique">u_2ec0:1</input_0>
							<input_1 size="1" storage="register">SF</input_1>
						</inputs>
					</pcode_21>
					<pcode_22>
						<output size="1" storage="unique">u_2ee0:1</output>
						<name>INT_AND</name>
						<inputs>
							<input_0 size="1" storage="unique">u_2e90:1</input_0>
							<input_1 size="1" storage="unique">u_2eb0:1</input_1>
						</inputs>
					</pcode_22>
					<pcode_23>
						<output size="1" storage="register">SF</output>
						<name>INT_OR</name>
						<inputs>
							<input_0 size="1" storage="unique">u_2ed0:1</input_0>
							<input_1 size="1" storage="unique">u_2ee0:1</input_1>
						</inputs>
					</pcode_23>
					<pcode_24>
						<output size="1" storage="unique">u_2f10:1</output>
						<name>INT_EQUAL</name>
						<inputs>
							<input_0 size="8" storage="register">RAX</input_0>
							<input_1 size="8" storage="constant">0x0</input_1>
						</inputs>
					</pcode_24>
					<pcode_25>
						<output size="1" storage="unique">u_2f20:1</output>
						<name>BOOL_NEGATE</name>
						<inputs>
							<input_0 size="1" storage="unique">u_2e90:1</input_0>
						</inputs>
					</pcode_25>
					<pcode_26>
						<output size="1" storage="unique">u_2f30:1</output>
						<name>INT_AND</name>
						<inputs>
							<input_0 size="1" storage="unique">u_2f20:1</input_0>
							<input_1 size="1" storage="register">ZF</input_1>
						</inputs>
					</pcode_26>
					<pcode_27>
						<output size="1" storage="unique">u_2f40:1</output>
						<name>INT_AND</name>
						<inputs>
							<input_0 size="1" storage="unique">u_2e90:1</input_0>
							<input_1 size="1" storage="unique">u_2f10:1</input_1>
						</inputs>
					</pcode_27>
					<pcode_28>
						<output size="1" storage="register">ZF</output>
						<name>INT_OR</name>
						<inputs>
							<input_0 size="1" storage="unique">u_2f30:1</input_0>
							<input_1 size="1" storage="unique">u_2f40:1</input_1>
						</inputs>
					</pcode_28>
				</pcodes>
			</instruction_6>
			<instruction_7>ADD RSI,RAX
				<address>0040043b</address>
				<pcodes>
					<pcode_0>
						<output size="1" storage="register">CF</output>
						<name>INT_CARRY</name>
						<inputs>
							<input_0 size="8" storage="register">RSI</input_0>
							<input_1 size="8" storage="register">RAX</input_1></inputs>
					</pcode_0>
					<pcode_1>
						<output size="1" storage="register">OF</output>
						<name>INT_SCARRY</name>
						<inputs>
							<input_0 size="8" storage="register">RSI</input_0>
							<input_1 size="8" storage="register">RAX</input_1>
						</inputs>
					</pcode_1>
					<pcode_2>
						<output size="8" storage="register">RSI</output>
						<name>INT_ADD</name>
						<inputs>
							<input_0 size="8" storage="register">RSI</input_0>
							<input_1 size="8" storage="register">RAX</input_1>
						</inputs>
					</pcode_2>
					<pcode_3>
						<output size="1" storage="register">SF</output>
						<name>INT_SLESS</name>
						<inputs>
							<input_0 size="8" storage="register">RSI</input_0>
							<input_1 size="8" storage="constant">0x0</input_1>
						</inputs>
					</pcode_3>
					<pcode_4>
						<output size="1" storage="register">ZF</output>
						<name>INT_EQUAL</name>
						<inputs>
							<input_0 size="8" storage="register">RSI</input_0>
							<input_1 size="8" storage="constant">0x0</input_1>
						</inputs>
					</pcode_4>
				</pcodes>
			</instruction_7>
			<instruction_8>SAR RSI,1
				<address>0040043e</address>
				<pcodes>
					<pcode_0>
						<output size="1" storage="unique">u_2010:1</output>
						<name>COPY</name>
						<inputs>
							<input_0 size="1" storage="constant">0x1</input_0></inputs>
					</pcode_0>
					<pcode_1>
						<output size="8" storage="unique">u_ac70:8</output>
						<name>INT_AND</name>
						<inputs>
							<input_0 size="8" storage="register">RSI</input_0>
							<input_1 size="8" storage="constant">0x1</input_1>
						</inputs>
					</pcode_1>
					<pcode_2>
						<output size="1" storage="register">CF</output>
						<name>INT_NOTEQUAL</name>
						<inputs>
							<input_0 size="8" storage="unique">u_ac70:8</input_0>
							<input_1 size="8" storage="constant">0x0</input_1>
						</inputs>
					</pcode_2>
					<pcode_3>
						<output size="1" storage="register">OF</output>
						<name>COPY</name>
						<inputs>
							<input_0 size="1" storage="constant">0x0</input_0>
						</inputs>
					</pcode_3>
					<pcode_4>
						<output size="8" storage="register">RSI</output>
						<name>INT_SRIGHT</name>
						<inputs>
							<input_0 size="8" storage="register">RSI</input_0>
							<input_1 size="4" storage="constant">0x1</input_1>
						</inputs>
					</pcode_4>
					<pcode_5>
						<output size="1" storage="register">SF</output>
						<name>INT_SLESS</name>
						<inputs>
							<input_0 size="8" storage="register">RSI</input_0>
							<input_1 size="8" storage="constant">0x0</input_1>
						</inputs>
					</pcode_5>
					<pcode_6>
						<output size="1" storage="register">ZF</output>
						<name>INT_EQUAL</name>
						<inputs>
							<input_0 size="8" storage="register">RSI</input_0>
							<input_1 size="8" storage="constant">0x0</input_1>
						</inputs>
					</pcode_6>
				</pcodes>
			</instruction_8>
			<instruction_9>JZ 0x00400458
				<address>00400441</address>
				<pcodes>
					<pcode_0>
						<name>CBRANCH</name>
						<inputs>
							<input_0 size="8" storage="memory">A_00400458:8</input_0>
							<input_1 size="1" storage="register">ZF</input_1></inputs>
					</pcode_0>
				</pcodes>
			</instruction_9>
			<instruction_10>MOV EAX,0x0
				<address>00400443</address>
				<pcodes>
					<pcode_0>
						<output size="8" storage="register">RAX</output>
						<name>COPY</name>
						<inputs>
							<input_0 size="8" storage="constant">0x0</input_0></inputs>
					</pcode_0>
				</pcodes>
			</instruction_10>
			<instruction_11>TEST RAX,RAX
				<address>00400448</address>
				<pcodes>
					<pcode_0>
						<output size="1" storage="register">CF</output>
						<name>COPY</name>
						<inputs>
							<input_0 size="1" storage="constant">0x0</input_0></inputs>
					</pcode_0>
					<pcode_1>
						<output size="1" storage="register">OF</output>
						<name>COPY</name>
						<inputs>
							<input_0 size="1" storage="constant">0x0</input_0>
						</inputs>
					</pcode_1>
					<pcode_2>
						<output size="8" storage="unique">u_bbe0:8</output>
						<name>INT_AND</name>
						<inputs>
							<input_0 size="8" storage="register">RAX</input_0>
							<input_1 size="8" storage="register">RAX</input_1>
						</inputs>
					</pcode_2>
					<pcode_3>
						<output size="1" storage="register">SF</output>
						<name>INT_SLESS</name>
						<inputs>
							<input_0 size="8" storage="unique">u_bbe0:8</input_0>
							<input_1 size="8" storage="constant">0x0</input_1>
						</inputs>
					</pcode_3>
					<pcode_4>
						<output size="1" storage="register">ZF</output>
						<name>INT_EQUAL</name>
						<inputs>
							<input_0 size="8" storage="unique">u_bbe0:8</input_0>
							<input_1 size="8" storage="constant">0x0</input_1>
						</inputs>
					</pcode_4>
				</pcodes>
			</instruction_11>
			<instruction_12>JZ 0x00400458
				<address>0040044b</address>
				<pcodes>
					<pcode_0>
						<name>CBRANCH</name>
						<inputs>
							<input_0 size="8" storage="memory">A_00400458:8</input_0>
							<input_1 size="1" storage="register">ZF</input_1></inputs>
					</pcode_0>
				</pcodes>
			</instruction_12>
			<instruction_13>POP RBP
				<address>0040044d</address>
				<pcodes>
					<pcode_0>
						<output size="8" storage="register">RBP</output>
						<name>LOAD</name>
						<inputs>
							<input_0 size="8" storage="constant">0x1b1</input_0>
							<input_1 size="8" storage="register">RSP</input_1></inputs>
					</pcode_0>
					<pcode_1>
						<output size="8" storage="register">RSP</output>
						<name>INT_ADD</name>
						<inputs>
							<input_0 size="8" storage="register">RSP</input_0>
							<input_1 size="8" storage="constant">0x8</input_1>
						</inputs>
					</pcode_1>
				</pcodes>
			</instruction_13>
			<instruction_14>MOV EDI,0x601028
				<address>0040044e</address>
				<pcodes>
					<pcode_0>
						<output size="8" storage="register">RDI</output>
						<name>COPY</name>
						<inputs>
							<input_0 size="8" storage="constant">0x601028</input_0></inputs>
					</pcode_0>
				</pcodes>
			</instruction_14>
			<instruction_15>JMP RAX
				<address>00400453</address>
				<pcodes>
					<pcode_0>
						<name>BRANCHIND</name>
						<inputs>
							<input_0 size="8" storage="register">RAX</input_0></inputs>
					</pcode_0>
				</pcodes>
			</instruction_15>
			<instruction_16>POP RBP
				<address>00400458</address>
				<pcodes>
					<pcode_0>
						<output size="8" storage="register">RBP</output>
						<name>LOAD</name>
						<inputs>
							<input_0 size="8" storage="constant">0x1b1</input_0>
							<input_1 size="8" storage="register">RSP</input_1></inputs>
					</pcode_0>
					<pcode_1>
						<output size="8" storage="register">RSP</output>
						<name>INT_ADD</name>
						<inputs>
							<input_0 size="8" storage="register">RSP</input_0>
							<input_1 size="8" storage="constant">0x8</input_1>
						</inputs>
					</pcode_1>
				</pcodes>
			</instruction_16>
			<instruction_17>RET
				<address>00400459</address>
				<pcodes>
					<pcode_0>
						<output size="8" storage="register">RIP</output>
						<name>LOAD</name>
						<inputs>
							<input_0 size="8" storage="constant">0x1b1</input_0>
							<input_1 size="8" storage="register">RSP</input_1></inputs>
					</pcode_0>
					<pcode_1>
						<output size="8" storage="register">RSP</output>
						<name>INT_ADD</name>
						<inputs>
							<input_0 size="8" storage="register">RSP</input_0>
							<input_1 size="8" storage="constant">0x8</input_1>
						</inputs>
					</pcode_1>
					<pcode_2>
						<name>RETURN</name>
						<inputs>
							<input_0 size="8" storage="register">RIP</input_0>
						</inputs>
					</pcode_2>
				</pcodes>
			</instruction_17>
		</instructions>
	</function>
	<function address="00400460" name="__do_global_dtors_aux">
		<basic_blocks>
			<block_0 end="00400467" start="00400460"/>
			<block_1 end="00400480" start="00400480"/>
			<block_2 end="0040047a" start="00400469"/>
		</basic_blocks>
		<output type="undefined"/>
		<instructions>
			<instruction_0>CMP byte ptr [0x00601028],0x0
				<address>00400460</address>
				<pcodes>
					<pcode_0>
						<output size="1" storage="register">CF</output>
						<name>INT_LESS</name>
						<inputs>
							<input_0 size="1" storage="memory">A_00601028:1</input_0>
							<input_1 size="1" storage="constant">0x0</input_1></inputs>
					</pcode_0>
					<pcode_1>
						<output size="1" storage="register">OF</output>
						<name>INT_SBORROW</name>
						<inputs>
							<input_0 size="1" storage="memory">A_00601028:1</input_0>
							<input_1 size="1" storage="constant">0x0</input_1>
						</inputs>
					</pcode_1>
					<pcode_2>
						<output size="1" storage="unique">u_58b0:1</output>
						<name>INT_SUB</name>
						<inputs>
							<input_0 size="1" storage="memory">A_00601028:1</input_0>
							<input_1 size="1" storage="constant">0x0</input_1>
						</inputs>
					</pcode_2>
					<pcode_3>
						<output size="1" storage="register">SF</output>
						<name>INT_SLESS</name>
						<inputs>
							<input_0 size="1" storage="unique">u_58b0:1</input_0>
							<input_1 size="1" storage="constant">0x0</input_1>
						</inputs>
					</pcode_3>
					<pcode_4>
						<output size="1" storage="register">ZF</output>
						<name>INT_EQUAL</name>
						<inputs>
							<input_0 size="1" storage="unique">u_58b0:1</input_0>
							<input_1 size="1" storage="constant">0x0</input_1>
						</inputs>
					</pcode_4>
				</pcodes>
			</instruction_0>
			<instruction_1>JNZ 0x00400480
				<address>00400467</address>
				<pcodes>
					<pcode_0>
						<output size="1" storage="unique">u_2110:1</output>
						<name>BOOL_NEGATE</name>
						<inputs>
							<input_0 size="1" storage="register">ZF</input_0></inputs>
					</pcode_0>
					<pcode_1>
						<name>CBRANCH</name>
						<inputs>
							<input_0 size="8" storage="memory">A_00400480:8</input_0>
							<input_1 size="1" storage="unique">u_2110:1</input_1>
						</inputs>
					</pcode_1>
				</pcodes>
			</instruction_1>
			<instruction_2>PUSH RBP
				<address>00400469</address>
				<pcodes>
					<pcode_0>
						<output size="8" storage="unique">u_2510:8</output>
						<name>COPY</name>
						<inputs>
							<input_0 size="8" storage="register">RBP</input_0></inputs>
					</pcode_0>
					<pcode_1>
						<output size="8" storage="register">RSP</output>
						<name>INT_SUB</name>
						<inputs>
							<input_0 size="8" storage="register">RSP</input_0>
							<input_1 size="8" storage="constant">0x8</input_1>
						</inputs>
					</pcode_1>
					<pcode_2>
						<name>STORE</name>
						<inputs>
							<input_0 size="8" storage="constant">0x1b1</input_0>
							<input_1 size="8" storage="register">RSP</input_1>
							<input_2 size="8" storage="unique">u_2510:8</input_2>
						</inputs>
					</pcode_2>
				</pcodes>
			</instruction_2>
			<instruction_3>MOV RBP,RSP
				<address>0040046a</address>
				<pcodes>
					<pcode_0>
						<output size="8" storage="register">RBP</output>
						<name>COPY</name>
						<inputs>
							<input_0 size="8" storage="register">RSP</input_0></inputs>
					</pcode_0>
				</pcodes>
			</instruction_3>
			<instruction_4>CALL 0x004003f0
				<address>0040046d</address>
				<pcodes>
					<pcode_0>
						<output size="8" storage="register">RSP</output>
						<name>INT_SUB</name>
						<inputs>
							<input_0 size="8" storage="register">RSP</input_0>
							<input_1 size="8" storage="constant">0x8</input_1></inputs>
					</pcode_0>
					<pcode_1>
						<name>STORE</name>
						<inputs>
							<input_0 size="8" storage="constant">0x1b1</input_0>
							<input_1 size="8" storage="register">RSP</input_1>
							<input_2 size="8" storage="constant">0x400472</input_2>
						</inputs>
					</pcode_1>
					<pcode_2>
						<name>CALL</name>
						<inputs>
							<input_0 size="8" storage="memory">A_004003f0:8</input_0>
						</inputs>
					</pcode_2>
				</pcodes>
			</instruction_4>
			<instruction_5>MOV byte ptr [0x00601028],0x1
				<address>00400472</address>
				<pcodes>
					<pcode_0>
						<output size="1" storage="memory">A_00601028:1</output>
						<name>COPY</name>
						<inputs>
							<input_0 size="1" storage="constant">0x1</input_0></inputs>
					</pcode_0>
				</pcodes>
			</instruction_5>
			<instruction_6>POP RBP
				<address>00400479</address>
				<pcodes>
					<pcode_0>
						<output size="8" storage="register">RBP</output>
						<name>LOAD</name>
						<inputs>
							<input_0 size="8" storage="constant">0x1b1</input_0>
							<input_1 size="8" storage="register">RSP</input_1></inputs>
					</pcode_0>
					<pcode_1>
						<output size="8" storage="register">RSP</output>
						<name>INT_ADD</name>
						<inputs>
							<input_0 size="8" storage="register">RSP</input_0>
							<input_1 size="8" storage="constant">0x8</input_1>
						</inputs>
					</pcode_1>
				</pcodes>
			</instruction_6>
			<instruction_7>RET
				<address>0040047a</address>
				<pcodes>
					<pcode_0>
						<output size="8" storage="register">RIP</output>
						<name>LOAD</name>
						<inputs>
							<input_0 size="8" storage="constant">0x1b1</input_0>
							<input_1 size="8" storage="register">RSP</input_1></inputs>
					</pcode_0>
					<pcode_1>
						<output size="8" storage="register">RSP</output>
						<name>INT_ADD</name>
						<inputs>
							<input_0 size="8" storage="register">RSP</input_0>
							<input_1 size="8" storage="constant">0x8</input_1>
						</inputs>
					</pcode_1>
					<pcode_2>
						<name>RETURN</name>
						<inputs>
							<input_0 size="8" storage="register">RIP</input_0>
						</inputs>
					</pcode_2>
				</pcodes>
			</instruction_7>
		</instructions>
	</function>
	<function address="00400490" name="frame_dummy">
		<basic_blocks>
			<block_0 end="00400495" start="00400490"/>
		</basic_blocks>
		<output type="undefined"/>
		<instructions>
			<instruction_0>PUSH RBP
				<address>00400490</address>
				<pcodes>
					<pcode_0>
						<output size="8" storage="unique">u_2510:8</output>
						<name>COPY</name>
						<inputs>
							<input_0 size="8" storage="register">RBP</input_0></inputs>
					</pcode_0>
					<pcode_1>
						<output size="8" storage="register">RSP</output>
						<name>INT_SUB</name>
						<inputs>
							<input_0 size="8" storage="register">RSP</input_0>
							<input_1 size="8" storage="constant">0x8</input_1>
						</inputs>
					</pcode_1>
					<pcode_2>
						<name>STORE</name>
						<inputs>
							<input_0 size="8" storage="constant">0x1b1</input_0>
							<input_1 size="8" storage="register">RSP</input_1>
							<input_2 size="8" storage="unique">u_2510:8</input_2>
						</inputs>
					</pcode_2>
				</pcodes>
			</instruction_0>
			<instruction_1>MOV RBP,RSP
				<address>00400491</address>
				<pcodes>
					<pcode_0>
						<output size="8" storage="register">RBP</output>
						<name>COPY</name>
						<inputs>
							<input_0 size="8" storage="register">RSP</input_0></inputs>
					</pcode_0>
				</pcodes>
			</instruction_1>
			<instruction_2>POP RBP
				<address>00400494</address>
				<pcodes>
					<pcode_0>
						<output size="8" storage="register">RBP</output>
						<name>LOAD</name>
						<inputs>
							<input_0 size="8" storage="constant">0x1b1</input_0>
							<input_1 size="8" storage="register">RSP</input_1></inputs>
					</pcode_0>
					<pcode_1>
						<output size="8" storage="register">RSP</output>
						<name>INT_ADD</name>
						<inputs>
							<input_0 size="8" storage="register">RSP</input_0>
							<input_1 size="8" storage="constant">0x8</input_1>
						</inputs>
					</pcode_1>
				</pcodes>
			</instruction_2>
			<instruction_3>JMP 0x00400420
				<address>00400495</address>
				<pcodes>
					<pcode_0>
						<name>BRANCH</name>
						<inputs>
							<input_0 size="8" storage="memory">A_00400420:8</input_0></inputs>
					</pcode_0>
				</pcodes>
			</instruction_3>
			<instruction_4>LEA EAX,[RDI + RSI*0x1]
				<address>004004a0</address>
				<pcodes>
					<pcode_0>
						<output size="8" storage="unique">u_660:8</output>
						<name>INT_MULT</name>
						<inputs>
							<input_0 size="8" storage="register">RSI</input_0>
							<input_1 size="8" storage="constant">0x1</input_1></inputs>
					</pcode_0>
					<pcode_1>
						<output size="8" storage="unique">u_680:8</output>
						<name>INT_ADD</name>
						<inputs>
							<input_0 size="8" storage="register">RDI</input_0>
							<input_1 size="8" storage="unique">u_660:8</input_1>
						</inputs>
					</pcode_1>
					<pcode_2>
						<output size="4" storage="register">EAX</output>
						<name>SUBPIECE</name>
						<inputs>
							<input_0 size="8" storage="unique">u_680:8</input_0>
							<input_1 size="4" storage="constant">0x0</input_1>
						</inputs>
					</pcode_2>
					<pcode_3>
						<output size="8" storage="register">RAX</output>
						<name>INT_ZEXT</name>
						<inputs>
							<input_0 size="4" storage="register">EAX</input_0>
						</inputs>
					</pcode_3>
				</pcodes>
			</instruction_4>
			<instruction_5>RET
				<address>004004a3</address>
				<pcodes>
					<pcode_0>
						<output size="8" storage="register">RIP</output>
						<name>LOAD</name>
						<inputs>
							<input_0 size="8" storage="constant">0x1b1</input_0>
							<input_1 size="8" storage="register">RSP</input_1></inputs>
					</pcode_0>
					<pcode_1>
						<output size="8" storage="register">RSP</output>
						<name>INT_ADD</name>
						<inputs>
							<input_0 size="8" storage="register">RSP</input_0>
							<input_1 size="8" storage="constant">0x8</input_1>
						</inputs>
					</pcode_1>
					<pcode_2>
						<name>RETURN</name>
						<inputs>
							<input_0 size="8" storage="register">RIP</input_0>
						</inputs>
					</pcode_2>
				</pcodes>
			</instruction_5>
		</instructions>
	</function>
	<function address="004004a0" name="add">
		<basic_blocks>
			<block_0 end="004004a3" start="004004a0"/>
		</basic_blocks>
		<output type="undefined"/>
		<instructions>
			<instruction_0>LEA EAX,[RDI + RSI*0x1]
				<address>004004a0</address>
				<pcodes>
					<pcode_0>
						<output size="8" storage="unique">u_660:8</output>
						<name>INT_MULT</name>
						<inputs>
							<input_0 size="8" storage="register">RSI</input_0>
							<input_1 size="8" storage="constant">0x1</input_1></inputs>
					</pcode_0>
					<pcode_1>
						<output size="8" storage="unique">u_680:8</output>
						<name>INT_ADD</name>
						<inputs>
							<input_0 size="8" storage="register">RDI</input_0>
							<input_1 size="8" storage="unique">u_660:8</input_1>
						</inputs>
					</pcode_1>
					<pcode_2>
						<output size="4" storage="register">EAX</output>
						<name>SUBPIECE</name>
						<inputs>
							<input_0 size="8" storage="unique">u_680:8</input_0>
							<input_1 size="4" storage="constant">0x0</input_1>
						</inputs>
					</pcode_2>
					<pcode_3>
						<output size="8" storage="register">RAX</output>
						<name>INT_ZEXT</name>
						<inputs>
							<input_0 size="4" storage="register">EAX</input_0>
						</inputs>
					</pcode_3>
				</pcodes>
			</instruction_0>
			<instruction_1>RET
				<address>004004a3</address>
				<pcodes>
					<pcode_0>
						<output size="8" storage="register">RIP</output>
						<name>LOAD</name>
						<inputs>
							<input_0 size="8" storage="constant">0x1b1</input_0>
							<input_1 size="8" storage="register">RSP</input_1></inputs>
					</pcode_0>
					<pcode_1>
						<output size="8" storage="register">RSP</output>
						<name>INT_ADD</name>
						<inputs>
							<input_0 size="8" storage="register">RSP</input_0>
							<input_1 size="8" storage="constant">0x8</input_1>
						</inputs>
					</pcode_1>
					<pcode_2>
						<name>RETURN</name>
						<inputs>
							<input_0 size="8" storage="register">RIP</input_0>
						</inputs>
					</pcode_2>
				</pcodes>
			</instruction_1>
		</instructions>
	</function>
	<function address="004004b0" name="main">
		<basic_blocks>
			<block_0 end="004004b6" start="004004b0"/>
		</basic_blocks>
		<output type="undefined"/>
		<instructions>
			<instruction_0>LEA EAX,[RDI + RDI*0x1]
				<address>004004b0</address>
				<pcodes>
					<pcode_0>
						<output size="8" storage="unique">u_660:8</output>
						<name>INT_MULT</name>
						<inputs>
							<input_0 size="8" storage="register">RDI</input_0>
							<input_1 size="8" storage="constant">0x1</input_1></inputs>
					</pcode_0>
					<pcode_1>
						<output size="8" storage="unique">u_680:8</output>
						<name>INT_ADD</name>
						<inputs>
							<input_0 size="8" storage="register">RDI</input_0>
							<input_1 size="8" storage="unique">u_660:8</input_1>
						</inputs>
					</pcode_1>
					<pcode_2>
						<output size="4" storage="register">EAX</output>
						<name>SUBPIECE</name>
						<inputs>
							<input_0 size="8" storage="unique">u_680:8</input_0>
							<input_1 size="4" storage="constant">0x0</input_1>
						</inputs>
					</pcode_2>
					<pcode_3>
						<output size="8" storage="register">RAX</output>
						<name>INT_ZEXT</name>
						<inputs>
							<input_0 size="4" storage="register">EAX</input_0>
						</inputs>
					</pcode_3>
				</pcodes>
			</instruction_0>
			<instruction_1>ADD EAX,0x2
				<address>004004b3</address>
				<pcodes>
					<pcode_0>
						<output size="1" storage="register">CF</output>
						<name>INT_CARRY</name>
						<inputs>
							<input_0 size="4" storage="register">EAX</input_0>
							<input_1 size="4" storage="constant">0x2</input_1></inputs>
					</pcode_0>
					<pcode_1>
						<output size="1" storage="register">OF</output>
						<name>INT_SCARRY</name>
						<inputs>
							<input_0 size="4" storage="register">EAX</input_0>
							<input_1 size="4" storage="constant">0x2</input_1>
						</inputs>
					</pcode_1>
					<pcode_2>
						<output size="4" storage="register">EAX</output>
						<name>INT_ADD</name>
						<inputs>
							<input_0 size="4" storage="register">EAX</input_0>
							<input_1 size="4" storage="constant">0x2</input_1>
						</inputs>
					</pcode_2>
					<pcode_3>
						<output size="8" storage="register">RAX</output>
						<name>INT_ZEXT</name>
						<inputs>
							<input_0 size="4" storage="register">EAX</input_0>
						</inputs>
					</pcode_3>
					<pcode_4>
						<output size="1" storage="register">SF</output>
						<name>INT_SLESS</name>
						<inputs>
							<input_0 size="4" storage="register">EAX</input_0>
							<input_1 size="4" storage="constant">0x0</input_1>
						</inputs>
					</pcode_4>
					<pcode_5>
						<output size="1" storage="register">ZF</output>
						<name>INT_EQUAL</name>
						<inputs>
							<input_0 size="4" storage="register">EAX</input_0>
							<input_1 size="4" storage="constant">0x0</input_1>
						</inputs>
					</pcode_5>
				</pcodes>
			</instruction_1>
			<instruction_2>RET
				<address>004004b6</address>
				<pcodes>
					<pcode_0>
						<output size="8" storage="register">RIP</output>
						<name>LOAD</name>
						<inputs>
							<input_0 size="8" storage="constant">0x1b1</input_0>
							<input_1 size="8" storage="register">RSP</input_1></inputs>
					</pcode_0>
					<pcode_1>
						<output size="8" storage="register">RSP</output>
						<name>INT_ADD</name>
						<inputs>
							<input_0 size="8" storage="register">RSP</input_0>
							<input_1 size="8" storage="constant">0x8</input_1>
						</inputs>
					</pcode_1>
					<pcode_2>
						<name>RETURN</name>
						<inputs>
							<input_0 size="8" storage="register">RIP</input_0>
						</inputs>
					</pcode_2>
				</pcodes>
			</instruction_2>
		</instructions>
	</function>
	<function address="004004c0" name="__libc_csu_init">
		<basic_blocks>
			<block_0 end="004004f8" start="004004c0"/>
			<block_1 end="00400514" start="00400500"/>
			<block_2 end="00400524" start="00400516"/>
		</basic_blocks>
		<output type="undefined"/>
		<instructions>
			<instruction_0>PUSH R15
				<address>004004c0</address>
				<pcodes>
					<pcode_0>
						<output size="8" storage="unique">u_2510:8</output>
						<name>COPY</name>
						<inputs>
							<input_0 size="8" storage="register">R15</input_0></inputs>
					</pcode_0>
					<pcode_1>
						<output size="8" storage="register">RSP</output>
						<name>INT_SUB</name>
						<inputs>
							<input_0 size="8" storage="register">RSP</input_0>
							<input_1 size="8" storage="constant">0x8</input_1>
						</inputs>
					</pcode_1>
					<pcode_2>
						<name>STORE</name>
						<inputs>
							<input_0 size="8" storage="constant">0x1b1</input_0>
							<input_1 size="8" storage="register">RSP</input_1>
							<input_2 size="8" storage="unique">u_2510:8</input_2>
						</inputs>
					</pcode_2>
				</pcodes>
			</instruction_0>
			<instruction_1>PUSH R14
				<address>004004c2</address>
				<pcodes>
					<pcode_0>
						<output size="8" storage="unique">u_2510:8</output>
						<name>COPY</name>
						<inputs>
							<input_0 size="8" storage="register">R14</input_0></inputs>
					</pcode_0>
					<pcode_1>
						<output size="8" storage="register">RSP</output>
						<name>INT_SUB</name>
						<inputs>
							<input_0 size="8" storage="register">RSP</input_0>
							<input_1 size="8" storage="constant">0x8</input_1>
						</inputs>
					</pcode_1>
					<pcode_2>
						<name>STORE</name>
						<inputs>
							<input_0 size="8" storage="constant">0x1b1</input_0>
							<input_1 size="8" storage="register">RSP</input_1>
							<input_2 size="8" storage="unique">u_2510:8</input_2>
						</inputs>
					</pcode_2>
				</pcodes>
			</instruction_1>
			<instruction_2>MOV R15,RDX
				<address>004004c4</address>
				<pcodes>
					<pcode_0>
						<output size="8" storage="register">R15</output>
						<name>COPY</name>
						<inputs>
							<input_0 size="8" storage="register">RDX</input_0></inputs>
					</pcode_0>
				</pcodes>
			</instruction_2>
			<instruction_3>PUSH R13
				<address>004004c7</address>
				<pcodes>
					<pcode_0>
						<output size="8" storage="unique">u_2510:8</output>
						<name>COPY</name>
						<inputs>
							<input_0 size="8" storage="register">R13</input_0></inputs>
					</pcode_0>
					<pcode_1>
						<output size="8" storage="register">RSP</output>
						<name>INT_SUB</name>
						<inputs>
							<input_0 size="8" storage="register">RSP</input_0>
							<input_1 size="8" storage="constant">0x8</input_1>
						</inputs>
					</pcode_1>
					<pcode_2>
						<name>STORE</name>
						<inputs>
							<input_0 size="8" storage="constant">0x1b1</input_0>
							<input_1 size="8" storage="register">RSP</input_1>
							<input_2 size="8" storage="unique">u_2510:8</input_2>
						</inputs>
					</pcode_2>
				</pcodes>
			</instruction_3>
			<instruction_4>PUSH R12
				<address>004004c9</address>
				<pcodes>
					<pcode_0>
						<output size="8" storage="unique">u_2510:8</output>
						<name>COPY</name>
						<inputs>
							<input_0 size="8" storage="register">R12</input_0></inputs>
					</pcode_0>
					<pcode_1>
						<output size="8" storage="register">RSP</output>
						<name>INT_SUB</name>
						<inputs>
							<input_0 size="8" storage="register">RSP</input_0>
							<input_1 size="8" storage="constant">0x8</input_1>
						</inputs>
					</pcode_1>
					<pcode_2>
						<name>STORE</name>
						<inputs>
							<input_0 size="8" storage="constant">0x1b1</input_0>
							<input_1 size="8" storage="register">RSP</input_1>
							<input_2 size="8" storage="unique">u_2510:8</input_2>
						</inputs>
					</pcode_2>
				</pcodes>
			</instruction_4>
			<instruction_5>LEA R12,[0x600e50]
				<address>004004cb</address>
				<pcodes>
					<pcode_0>
						<output size="8" storage="register">R12</output>
						<name>COPY</name>
						<inputs>
							<input_0 size="8" storage="constant">0x600e50</input_0></inputs>
					</pcode_0>
				</pcodes>
			</instruction_5>
			<instruction_6>PUSH RBP
				<address>004004d2</address>
				<pcodes>
					<pcode_0>
						<output size="8" storage="unique">u_2510:8</output>
						<name>COPY</name>
						<inputs>
							<input_0 size="8" storage="register">RBP</input_0></inputs>
					</pcode_0>
					<pcode_1>
						<output size="8" storage="register">RSP</output>
						<name>INT_SUB</name>
						<inputs>
							<input_0 size="8" storage="register">RSP</input_0>
							<input_1 size="8" storage="constant">0x8</input_1>
						</inputs>
					</pcode_1>
					<pcode_2>
						<name>STORE</name>
						<inputs>
							<input_0 size="8" storage="constant">0x1b1</input_0>
							<input_1 size="8" storage="register">RSP</input_1>
							<input_2 size="8" storage="unique">u_2510:8</input_2>
						</inputs>
					</pcode_2>
				</pcodes>
			</instruction_6>
			<instruction_7>LEA RBP,[0x600e58]
				<address>004004d3</address>
				<pcodes>
					<pcode_0>
						<output size="8" storage="register">RBP</output>
						<name>COPY</name>
						<inputs>
							<input_0 size="8" storage="constant">0x600e58</input_0></inputs>
					</pcode_0>
				</pcodes>
			</instruction_7>
			<instruction_8>PUSH RBX
				<address>004004da</address>
				<pcodes>
					<pcode_0>
						<output size="8" storage="unique">u_2510:8</output>
						<name>COPY</name>
						<inputs>
							<input_0 size="8" storage="register">RBX</input_0></inputs>
					</pcode_0>
					<pcode_1>
						<output size="8" storage="register">RSP</output>
						<name>INT_SUB</name>
						<inputs>
							<input_0 size="8" storage="register">RSP</input_0>
							<input_1 size="8" storage="constant">0x8</input_1>
						</inputs>
					</pcode_1>
					<pcode_2>
						<name>STORE</name>
						<inputs>
							<input_0 size="8" storage="constant">0x1b1</input_0>
							<input_1 size="8" storage="register">RSP</input_1>
							<input_2 size="8" storage="unique">u_2510:8</input_2>
						</inputs>
					</pcode_2>
				</pcodes>
			</instruction_8>
			<instruction_9>MOV R13D,EDI
				<address>004004db</address>
				<pcodes>
					<pcode_0>
						<output size="4" storage="register">R13D</output>
						<name>COPY</name>
						<inputs>
							<input_0 size="4" storage="register">EDI</input_0></inputs>
					</pcode_0>
					<pcode_1>
						<output size="8" storage="register">R13</output>
						<name>INT_ZEXT</name>
						<inputs>
							<input_0 size="4" storage="register">R13D</input_0>
						</inputs>
					</pcode_1>
				</pcodes>
			</instruction_9>
			<instruction_10>MOV R14,RSI
				<address>004004de</address>
				<pcodes>
					<pcode_0>
						<output size="8" storage="register">R14</output>
						<name>COPY</name>
						<inputs>
							<input_0 size="8" storage="register">RSI</input_0></inputs>
					</pcode_0>
				</pcodes>
			</instruction_10>
			<instruction_11>SUB RBP,R12
				<address>004004e1</address>
				<pcodes>
					<pcode_0>
						<output size="1" storage="register">CF</output>
						<name>INT_LESS</name>
						<inputs>
							<input_0 size="8" storage="register">RBP</input_0>
							<input_1 size="8" storage="register">R12</input_1></inputs>
					</pcode_0>
					<pcode_1>
						<output size="1" storage="register">OF</output>
						<name>INT_SBORROW</name>
						<inputs>
							<input_0 size="8" storage="register">RBP</input_0>
							<input_1 size="8" storage="register">R12</input_1>
						</inputs>
					</pcode_1>
					<pcode_2>
						<output size="8" storage="register">RBP</output>
						<name>INT_SUB</name>
						<inputs>
							<input_0 size="8" storage="register">RBP</input_0>
							<input_1 size="8" storage="register">R12</input_1>
						</inputs>
					</pcode_2>
					<pcode_3>
						<output size="1" storage="register">SF</output>
						<name>INT_SLESS</name>
						<inputs>
							<input_0 size="8" storage="register">RBP</input_0>
							<input_1 size="8" storage="constant">0x0</input_1>
						</inputs>
					</pcode_3>
					<pcode_4>
						<output size="1" storage="register">ZF</output>
						<name>INT_EQUAL</name>
						<inputs>
							<input_0 size="8" storage="register">RBP</input_0>
							<input_1 size="8" storage="constant">0x0</input_1>
						</inputs>
					</pcode_4>
				</pcodes>
			</instruction_11>
			<instruction_12>SUB RSP,0x8
				<address>004004e4</address>
				<pcodes>
					<pcode_0>
						<output size="1" storage="register">CF</output>
						<name>INT_LESS</name>
						<inputs>
							<input_0 size="8" storage="register">RSP</input_0>
							<input_1 size="8" storage="constant">0x8</input_1></inputs>
					</pcode_0>
					<pcode_1>
						<output size="1" storage="register">OF</output>
						<name>INT_SBORROW</name>
						<inputs>
							<input_0 size="8" storage="register">RSP</input_0>
							<input_1 size="8" storage="constant">0x8</input_1>
						</inputs>
					</pcode_1>
					<pcode_2>
						<output size="8" storage="register">RSP</output>
						<name>INT_SUB</name>
						<inputs>
							<input_0 size="8" storage="register">RSP</input_0>
							<input_1 size="8" storage="constant">0x8</input_1>
						</inputs>
					</pcode_2>
					<pcode_3>
						<output size="1" storage="register">SF</output>
						<name>INT_SLESS</name>
						<inputs>
							<input_0 size="8" storage="register">RSP</input_0>
							<input_1 size="8" storage="constant">0x0</input_1>
						</inputs>
					</pcode_3>
					<pcode_4>
						<output size="1" storage="register">ZF</output>
						<name>INT_EQUAL</name>
						<inputs>
							<input_0 size="8" storage="register">RSP</input_0>
							<input_1 size="8" storage="constant">0x0</input_1>
						</inputs>
					</pcode_4>
				</pcodes>
			</instruction_12>
			<instruction_13>SAR RBP,0x3
				<address>004004e8</address>
				<pcodes>
					<pcode_0>
						<output size="4" storage="unique">u_acf0:4</output>
						<name>INT_AND</name>
						<inputs>
							<input_0 size="4" storage="constant">0x3</input_0>
							<input_1 size="4" storage="constant">0x3f</input_1></inputs>
					</pcode_0>
					<pcode_1>
						<output size="8" storage="unique">u_ad00:8</output>
						<name>COPY</name>
						<inputs>
							<input_0 size="8" storage="register">RBP</input_0>
						</inputs>
					</pcode_1>
					<pcode_2>
						<output size="8" storage="register">RBP</output>
						<name>INT_SRIGHT</name>
						<inputs>
							<input_0 size="8" storage="register">RBP</input_0>
							<input_1 size="4" storage="unique">u_acf0:4</input_1>
						</inputs>
					</pcode_2>
					<pcode_3>
						<output size="1" storage="unique">u_3380:1</output>
						<name>INT_NOTEQUAL</name>
						<inputs>
							<input_0 size="4" storage="unique">u_acf0:4</input_0>
							<input_1 size="4" storage="constant">0x0</input_1>
						</inputs>
					</pcode_3>
					<pcode_4>
						<output size="4" storage="unique">u_3390:4</output>
						<name>INT_SUB</name>
						<inputs>
							<input_0 size="4" storage="unique">u_acf0:4</input_0>
							<input_1 size="4" storage="constant">0x1</input_1>
						</inputs>
					</pcode_4>
					<pcode_5>
						<output size="8" storage="unique">u_33a0:8</output>
						<name>INT_SRIGHT</name>
						<inputs>
							<input_0 size="8" storage="unique">u_ad00:8</input_0>
							<input_1 size="4" storage="unique">u_3390:4</input_1>
						</inputs>
					</pcode_5>
					<pcode_6>
						<output size="8" storage="unique">u_33b0:8</output>
						<name>INT_AND</name>
						<inputs>
							<input_0 size="8" storage="unique">u_33a0:8</input_0>
							<input_1 size="8" storage="constant">0x1</input_1>
						</inputs>
					</pcode_6>
					<pcode_7>
						<output size="1" storage="unique">u_33d0:1</output>
						<name>INT_NOTEQUAL</name>
						<inputs>
							<input_0 size="8" storage="unique">u_33b0:8</input_0>
							<input_1 size="8" storage="constant">0x0</input_1>
						</inputs>
					</pcode_7>
					<pcode_8>
						<output size="1" storage="unique">u_33e0:1</output>
						<name>BOOL_NEGATE</name>
						<inputs>
							<input_0 size="1" storage="unique">u_3380:1</input_0>
						</inputs>
					</pcode_8>
					<pcode_9>
						<output size="1" storage="unique">u_33f0:1</output>
						<name>INT_AND</name>
						<inputs>
							<input_0 size="1" storage="unique">u_33e0:1</input_0>
							<input_1 size="1" storage="register">CF</input_1>
						</inputs>
					</pcode_9>
					<pcode_10>
						<output size="1" storage="unique">u_3400:1</output>
						<name>INT_AND</name>
						<inputs>
							<input_0 size="1" storage="unique">u_3380:1</input_0>
							<input_1 size="1" storage="unique">u_33d0:1</input_1>
						</inputs>
					</pcode_10>
					<pcode_11>
						<output size="1" storage="register">CF</output>
						<name>INT_OR</name>
						<inputs>
							<input_0 size="1" storage="unique">u_33f0:1</input_0>
							<input_1 size="1" storage="unique">u_3400:1</input_1>
						</inputs>
					</pcode_11>
					<pcode_12>
						<output size="1" storage="unique">u_3430:1</output>
						<name>INT_EQUAL</name>
						<inputs>
							<input_0 size="4" storage="unique">u_acf0:4</input_0>
							<input_1 size="4" storage="constant">0x1</input_1>
						</inputs>
					</pcode_12>
					<pcode_13>
						<output size="1" storage="unique">u_3440:1</output>
						<name>BOOL_NEGATE</name>
						<inputs>
							<input_0 size="1" storage="unique">u_3430:1</input_0>
						</inputs>
					</pcode_13>
					<pcode_14>
						<output size="1" storage="register">OF</output>
						<name>INT_AND</name>
						<inputs>
							<input_0 size="1" storage="unique">u_3440:1</input_0>
							<input_1 size="1" storage="register">OF</input_1>
						</inputs>
					</pcode_14>
					<pcode_15>
						<output size="1" storage="unique">u_2e90:1</output>
						<name>INT_NOTEQUAL</name>
						<inputs>
							<input_0 size="4" storage="unique">u_acf0:4</input_0>
							<input_1 size="4" storage="constant">0x0</input_1>
						</inputs>
					</pcode_15>
					<pcode_16>
						<output size="1" storage="unique">u_2eb0:1</output>
						<name>INT_SLESS</name>
						<inputs>
							<input_0 size="8" storage="register">RBP</input_0>
							<input_1 size="8" storage="constant">0x0</input_1>
						</inputs>
					</pcode_16>
					<pcode_17>
						<output size="1" storage="unique">u_2ec0:1</output>
						<name>BOOL_NEGATE</name>
						<inputs>
							<input_0 size="1" storage="unique">u_2e90:1</input_0>
						</inputs>
					</pcode_17>
					<pcode_18>
						<output size="1" storage="unique">u_2ed0:1</output>
						<name>INT_AND</name>
						<inputs>
							<input_0 size="1" storage="unique">u_2ec0:1</input_0>
							<input_1 size="1" storage="register">SF</input_1>
						</inputs>
					</pcode_18>
					<pcode_19>
						<output size="1" storage="unique">u_2ee0:1</output>
						<name>INT_AND</name>
						<inputs>
							<input_0 size="1" storage="unique">u_2e90:1</input_0>
							<input_1 size="1" storage="unique">u_2eb0:1</input_1>
						</inputs>
					</pcode_19>
					<pcode_20>
						<output size="1" storage="register">SF</output>
						<name>INT_OR</name>
						<inputs>
							<input_0 size="1" storage="unique">u_2ed0:1</input_0>
							<input_1 size="1" storage="unique">u_2ee0:1</input_1>
						</inputs>
					</pcode_20>
					<pcode_21>
						<output size="1" storage="unique">u_2f10:1</output>
						<name>INT_EQUAL</name>
						<inputs>
							<input_0 size="8" storage="register">RBP</input_0>
							<input_1 size="8" storage="constant">0x0</input_1>
						</inputs>
					</pcode_21>
					<pcode_22>
						<output size="1" storage="unique">u_2f20:1</output>
						<name>BOOL_NEGATE</name>
						<inputs>
							<input_0 size="1" storage="unique">u_2e90:1</input_0>
						</inputs>
					</pcode_22>
					<pcode_23>
						<output size="1" storage="unique">u_2f30:1</output>
						<name>INT_AND</name>
						<inputs>
							<input_0 size="1" storage="unique">u_2f20:1</input_0>
							<input_1 size="1" storage="register">ZF</input_1>
						</inputs>
					</pcode_23>
					<pcode_24>
						<output size="1" storage="unique">u_2f40:1</output>
						<name>INT_AND</name>
						<inputs>
							<input_0 size="1" storage="unique">u_2e90:1</input_0>
							<input_1 size="1" storage="unique">u_2f10:1</input_1>
						</inputs>
					</pcode_24>
					<pcode_25>
						<output size="1" storage="register">ZF</output>
						<name>INT_OR</name>
						<inputs>
							<input_0 size="1" storage="unique">u_2f30:1</input_0>
							<input_1 size="1" storage="unique">u_2f40:1</input_1>
						</inputs>
					</pcode_25>
				</pcodes>
			</instruction_13>
			<instruction_14>CALL 0x00400390
				<address>004004ec</address>
				<pcodes>
					<pcode_0>
						<output size="8" storage="register">RSP</output>
						<name>INT_SUB</name>
						<inputs>
							<input_0 size="8" storage="register">RSP</input_0>
							<input_1 size="8" storage="constant">0x8</input_1></inputs>
					</pcode_0>
					<pcode_1>
						<name>STORE</name>
						<inputs>
							<input_0 size="8" storage="constant">0x1b1</input_0>
							<input_1 size="8" storage="register">RSP</input_1>
							<input_2 size="8" storage="constant">0x4004f1</input_2>
						</inputs>
					</pcode_1>
					<pcode_2>
						<name>CALL</name>
						<inputs>
							<input_0 size="8" storage="memory">A_00400390:8</input_0>
						</inputs>
					</pcode_2>
				</pcodes>
			</instruction_14>
			<instruction_15>TEST RBP,RBP
				<address>004004f1</address>
				<pcodes>
					<pcode_0>
						<output size="1" storage="register">CF</output>
						<name>COPY</name>
						<inputs>
							<input_0 size="1" storage="constant">0x0</input_0></inputs>
					</pcode_0>
					<pcode_1>
						<output size="1" storage="register">OF</output>
						<name>COPY</name>
						<inputs>
							<input_0 size="1" storage="constant">0x0</input_0>
						</inputs>
					</pcode_1>
					<pcode_2>
						<output size="8" storage="unique">u_bbe0:8</output>
						<name>INT_AND</name>
						<inputs>
							<input_0 size="8" storage="register">RBP</input_0>
							<input_1 size="8" storage="register">RBP</input_1>
						</inputs>
					</pcode_2>
					<pcode_3>
						<output size="1" storage="register">SF</output>
						<name>INT_SLESS</name>
						<inputs>
							<input_0 size="8" storage="unique">u_bbe0:8</input_0>
							<input_1 size="8" storage="constant">0x0</input_1>
						</inputs>
					</pcode_3>
					<pcode_4>
						<output size="1" storage="register">ZF</output>
						<name>INT_EQUAL</name>
						<inputs>
							<input_0 size="8" storage="unique">u_bbe0:8</input_0>
							<input_1 size="8" storage="constant">0x0</input_1>
						</inputs>
					</pcode_4>
				</pcodes>
			</instruction_15>
			<instruction_16>JZ 0x00400516
				<address>004004f4</address>
				<pcodes>
					<pcode_0>
						<name>CBRANCH</name>
						<inputs>
							<input_0 size="8" storage="memory">A_00400516:8</input_0>
							<input_1 size="1" storage="register">ZF</input_1></inputs>
					</pcode_0>
				</pcodes>
			</instruction_16>
			<instruction_17>XOR EBX,EBX
				<address>004004f6</address>
				<pcodes>
					<pcode_0>
						<output size="1" storage="register">CF</output>
						<name>COPY</name>
						<inputs>
							<input_0 size="1" storage="constant">0x0</input_0></inputs>
					</pcode_0>
					<pcode_1>
						<output size="1" storage="register">OF</output>
						<name>COPY</name>
						<inputs>
							<input_0 size="1" storage="constant">0x0</input_0>
						</inputs>
					</pcode_1>
					<pcode_2>
						<output size="4" storage="register">EBX</output>
						<name>INT_XOR</name>
						<inputs>
							<input_0 size="4" storage="register">EBX</input_0>
							<input_1 size="4" storage="register">EBX</input_1>
						</inputs>
					</pcode_2>
					<pcode_3>
						<output size="8" storage="register">RBX</output>
						<name>INT_ZEXT</name>
						<inputs>
							<input_0 size="4" storage="register">EBX</input_0>
						</inputs>
					</pcode_3>
					<pcode_4>
						<output size="1" storage="register">SF</output>
						<name>INT_SLESS</name>
						<inputs>
							<input_0 size="4" storage="register">EBX</input_0>
							<input_1 size="4" storage="constant">0x0</input_1>
						</inputs>
					</pcode_4>
					<pcode_5>
						<output size="1" storage="register">ZF</output>
						<name>INT_EQUAL</name>
						<inputs>
							<input_0 size="4" storage="register">EBX</input_0>
							<input_1 size="4" storage="constant">0x0</input_1>
						</inputs>
					</pcode_5>
				</pcodes>
			</instruction_17>
			<instruction_18>NOP dword ptr [RAX + RAX*0x1]
				<address>004004f8</address>
				<pcodes>
					<pcode_0>
						<output size="8" storage="unique">u_7e0:8</output>
						<name>INT_MULT</name>
						<inputs>
							<input_0 size="8" storage="register">RAX</input_0>
							<input_1 size="8" storage="constant">0x1</input_1></inputs>
					</pcode_0>
					<pcode_1>
						<output size="8" storage="unique">u_800:8</output>
						<name>INT_ADD</name>
						<inputs>
							<input_0 size="8" storage="register">RAX</input_0>
							<input_1 size="8" storage="unique">u_7e0:8</input_1>
						</inputs>
					</pcode_1>
				</pcodes>
			</instruction_18>
			<instruction_19>MOV RDX,R15
				<address>00400500</address>
				<pcodes>
					<pcode_0>
						<output size="8" storage="register">RDX</output>
						<name>COPY</name>
						<inputs>
							<input_0 size="8" storage="register">R15</input_0></inputs>
					</pcode_0>
				</pcodes>
			</instruction_19>
			<instruction_20>MOV RSI,R14
				<address>00400503</address>
				<pcodes>
					<pcode_0>
						<output size="8" storage="register">RSI</output>
						<name>COPY</name>
						<inputs>
							<input_0 size="8" storage="register">R14</input_0></inputs>
					</pcode_0>
				</pcodes>
			</instruction_20>
			<instruction_21>MOV EDI,R13D
				<address>00400506</address>
				<pcodes>
					<pcode_0>
						<output size="4" storage="register">EDI</output>
						<name>COPY</name>
						<inputs>
							<input_0 size="4" storage="register">R13D</input_0></inputs>
					</pcode_0>
					<pcode_1>
						<output size="8" storage="register">RDI</output>
						<name>INT_ZEXT</name>
						<inputs>
							<input_0 size="4" storage="register">EDI</input_0>
						</inputs>
					</pcode_1>
				</pcodes>
			</instruction_21>
			<instruction_22>CALL qword ptr [R12 + RBX*0x8]
				<address>00400509</address>
				<pcodes>
					<pcode_0>
						<output size="8" storage="unique">u_660:8</output>
						<name>INT_MULT</name>
						<inputs>
							<input_0 size="8" storage="register">RBX</input_0>
							<input_1 size="8" storage="constant">0x8</input_1></inputs>
					</pcode_0>
					<pcode_1>
						<output size="8" storage="unique">u_680:8</output>
						<name>INT_ADD</name>
						<inputs>
							<input_0 size="8" storage="register">R12</input_0>
							<input_1 size="8" storage="unique">u_660:8</input_1>
						</inputs>
					</pcode_1>
					<pcode_2>
						<output size="8" storage="register">RSP</output>
						<name>INT_SUB</name>
						<inputs>
							<input_0 size="8" storage="register">RSP</input_0>
							<input_1 size="8" storage="constant">0x8</input_1>
						</inputs>
					</pcode_2>
					<pcode_3>
						<name>STORE</name>
						<inputs>
							<input_0 size="8" storage="constant">0x1b1</input_0>
							<input_1 size="8" storage="register">RSP</input_1>
							<input_2 size="8" storage="constant">0x40050d</input_2>
						</inputs>
					</pcode_3>
					<pcode_4>
						<output size="8" storage="unique">u_1ff0:8</output>
						<name>LOAD</name>
						<inputs>
							<input_0 size="4" storage="constant">0x1b1</input_0>
							<input_1 size="8" storage="unique">u_680:8</input_1>
						</inputs>
					</pcode_4>
					<pcode_5>
						<name>CALLIND</name>
						<inputs>
							<input_0 size="8" storage="unique">u_1ff0:8</input_0>
						</inputs>
					</pcode_5>
				</pcodes>
			</instruction_22>
			<instruction_23>ADD RBX,0x1
				<address>0040050d</address>
				<pcodes>
					<pcode_0>
						<output size="1" storage="register">CF</output>
						<name>INT_CARRY</name>
						<inputs>
							<input_0 size="8" storage="register">RBX</input_0>
							<input_1 size="8" storage="constant">0x1</input_1></inputs>
					</pcode_0>
					<pcode_1>
						<output size="1" storage="register">OF</output>
						<name>INT_SCARRY</name>
						<inputs>
							<input_0 size="8" storage="register">RBX</input_0>
							<input_1 size="8" storage="constant">0x1</input_1>
						</inputs>
					</pcode_1>
					<pcode_2>
						<output size="8" storage="register">RBX</output>
						<name>INT_ADD</name>
						<inputs>
							<input_0 size="8" storage="register">RBX</input_0>
							<input_1 size="8" storage="constant">0x1</input_1>
						</inputs>
					</pcode_2>
					<pcode_3>
						<output size="1" storage="register">SF</output>
						<name>INT_SLESS</name>
						<inputs>
							<input_0 size="8" storage="register">RBX</input_0>
							<input_1 size="8" storage="constant">0x0</input_1>
						</inputs>
					</pcode_3>
					<pcode_4>
						<output size="1" storage="register">ZF</output>
						<name>INT_EQUAL</name>
						<inputs>
							<input_0 size="8" storage="register">RBX</input_0>
							<input_1 size="8" storage="constant">0x0</input_1>
						</inputs>
					</pcode_4>
				</pcodes>
			</instruction_23>
			<instruction_24>CMP RBP,RBX
				<address>00400511</address>
				<pcodes>
					<pcode_0>
						<output size="1" storage="register">CF</output>
						<name>INT_LESS</name>
						<inputs>
							<input_0 size="8" storage="register">RBP</input_0>
							<input_1 size="8" storage="register">RBX</input_1></inputs>
					</pcode_0>
					<pcode_1>
						<output size="1" storage="register">OF</output>
						<name>INT_SBORROW</name>
						<inputs>
							<input_0 size="8" storage="register">RBP</input_0>
							<input_1 size="8" storage="register">RBX</input_1>
						</inputs>
					</pcode_1>
					<pcode_2>
						<output size="8" storage="unique">u_59f0:8</output>
						<name>INT_SUB</name>
						<inputs>
							<input_0 size="8" storage="register">RBP</input_0>
							<input_1 size="8" storage="register">RBX</input_1>
						</inputs>
					</pcode_2>
					<pcode_3>
						<output size="1" storage="register">SF</output>
						<name>INT_SLESS</name>
						<inputs>
							<input_0 size="8" storage="unique">u_59f0:8</input_0>
							<input_1 size="8" storage="constant">0x0</input_1>
						</inputs>
					</pcode_3>
					<pcode_4>
						<output size="1" storage="register">ZF</output>
						<name>INT_EQUAL</name>
						<inputs>
							<input_0 size="8" storage="unique">u_59f0:8</input_0>
							<input_1 size="8" storage="constant">0x0</input_1>
						</inputs>
					</pcode_4>
				</pcodes>
			</instruction_24>
			<instruction_25>JNZ 0x00400500
				<address>00400514</address>
				<pcodes>
					<pcode_0>
						<output size="1" storage="unique">u_2110:1</output>
						<name>BOOL_NEGATE</name>
						<inputs>
							<input_0 size="1" storage="register">ZF</input_0></inputs>
					</pcode_0>
					<pcode_1>
						<name>CBRANCH</name>
						<inputs>
							<input_0 size="8" storage="memory">A_00400500:8</input_0>
							<input_1 size="1" storage="unique">u_2110:1</input_1>
						</inputs>
					</pcode_1>
				</pcodes>
			</instruction_25>
			<instruction_26>ADD RSP,0x8
				<address>00400516</address>
				<pcodes>
					<pcode_0>
						<output size="1" storage="register">CF</output>
						<name>INT_CARRY</name>
						<inputs>
							<input_0 size="8" storage="register">RSP</input_0>
							<input_1 size="8" storage="constant">0x8</input_1></inputs>
					</pcode_0>
					<pcode_1>
						<output size="1" storage="register">OF</output>
						<name>INT_SCARRY</name>
						<inputs>
							<input_0 size="8" storage="register">RSP</input_0>
							<input_1 size="8" storage="constant">0x8</input_1>
						</inputs>
					</pcode_1>
					<pcode_2>
						<output size="8" storage="register">RSP</output>
						<name>INT_ADD</name>
						<inputs>
							<input_0 size="8" storage="register">RSP</input_0>
							<input_1 size="8" storage="constant">0x8</input_1>
						</inputs>
					</pcode_2>
					<pcode_3>
						<output size="1" storage="register">SF</output>
						<name>INT_SLESS</name>
						<inputs>
							<input_0 size="8" storage="register">RSP</input_0>
							<input_1 size="8" storage="constant">0x0</input_1>
						</inputs>
					</pcode_3>
					<pcode_4>
						<output size="1" storage="register">ZF</output>
						<name>INT_EQUAL</name>
						<inputs>
							<input_0 size="8" storage="register">RSP</input_0>
							<input_1 size="8" storage="constant">0x0</input_1>
						</inputs>
					</pcode_4>
				</pcodes>
			</instruction_26>
			<instruction_27>POP RBX
				<address>0040051a</address>
				<pcodes>
					<pcode_0>
						<output size="8" storage="register">RBX</output>
						<name>LOAD</name>
						<inputs>
							<input_0 size="8" storage="constant">0x1b1</input_0>
							<input_1 size="8" storage="register">RSP</input_1></inputs>
					</pcode_0>
					<pcode_1>
						<output size="8" storage="register">RSP</output>
						<name>INT_ADD</name>
						<inputs>
							<input_0 size="8" storage="register">RSP</input_0>
							<input_1 size="8" storage="constant">0x8</input_1>
						</inputs>
					</pcode_1>
				</pcodes>
			</instruction_27>
			<instruction_28>POP RBP
				<address>0040051b</address>
				<pcodes>
					<pcode_0>
						<output size="8" storage="register">RBP</output>
						<name>LOAD</name>
						<inputs>
							<input_0 size="8" storage="constant">0x1b1</input_0>
							<input_1 size="8" storage="register">RSP</input_1></inputs>
					</pcode_0>
					<pcode_1>
						<output size="8" storage="register">RSP</output>
						<name>INT_ADD</name>
						<inputs>
							<input_0 size="8" storage="register">RSP</input_0>
							<input_1 size="8" storage="constant">0x8</input_1>
						</inputs>
					</pcode_1>
				</pcodes>
			</instruction_28>
			<instruction_29>POP R12
				<address>0040051c</address>
				<pcodes>
					<pcode_0>
						<output size="8" storage="register">R12</output>
						<name>LOAD</name>
						<inputs>
							<input_0 size="8" storage="constant">0x1b1</input_0>
							<input_1 size="8" storage="register">RSP</input_1></inputs>
					</pcode_0>
					<pcode_1>
						<output size="8" storage="register">RSP</output>
						<name>INT_ADD</name>
						<inputs>
							<input_0 size="8" storage="register">RSP</input_0>
							<input_1 size="8" storage="constant">0x8</input_1>
						</inputs>
					</pcode_1>
				</pcodes>
			</instruction_29>
			<instruction_30>POP R13
				<address>0040051e</address>
				<pcodes>
					<pcode_0>
						<output size="8" storage="register">R13</output>
						<name>LOAD</name>
						<inputs>
							<input_0 size="8" storage="constant">0x1b1</input_0>
							<input_1 size="8" storage="register">RSP</input_1></inputs>
					</pcode_0>
					<pcode_1>
						<output size="8" storage="register">RSP</output>
						<name>INT_ADD</name>
						<inputs>
							<input_0 size="8" storage="register">RSP</input_0>
							<input_1 size="8" storage="constant">0x8</input_1>
						</inputs>
					</pcode_1>
				</pcodes>
			</instruction_30>
			<instruction_31>POP R14
				<address>00400520</address>
				<pcodes>
					<pcode_0>
						<output size="8" storage="register">R14</output>
						<name>LOAD</name>
						<inputs>
							<input_0 size="8" storage="constant">0x1b1</input_0>
							<input_1 size="8" storage="register">RSP</input_1></inputs>
					</pcode_0>
					<pcode_1>
						<output size="8" storage="register">RSP</output>
						<name>INT_ADD</name>
						<inputs>
							<input_0 size="8" storage="register">RSP</input_0>
							<input_1 size="8" storage="constant">0x8</input_1>
						</inputs>
					</pcode_1>
				</pcodes>
			</instruction_31>
			<instruction_32>POP R15
				<address>00400522</address>
				<pcodes>
					<pcode_0>
						<output size="8" storage="register">R15</output>
						<name>LOAD</name>
						<inputs>
							<input_0 size="8" storage="constant">0x1b1</input_0>
							<input_1 size="8" storage="register">RSP</input_1></inputs>
					</pcode_0>
					<pcode_1>
						<output size="8" storage="register">RSP</output>
						<name>INT_ADD</name>
						<inputs>
							<input_0 size="8" storage="register">RSP</input_0>
							<input_1 size="8" storage="constant">0x8</input_1>
						</inputs>
					</pcode_1>
				</pcodes>
			</instruction_32>
			<instruction_33>RET
				<address>00400524</address>
				<pcodes>
					<pcode_0>
						<output size="8" storage="register">RIP</output>
						<name>LOAD</name>
						<inputs>
							<input_0 size="8" storage="constant">0x1b1</input_0>
							<input_1 size="8" storage="register">RSP</input_1></inputs>
					</pcode_0>
					<pcode_1>
						<output size="8" storage="register">RSP</output>
						<name>INT_ADD</name>
						<inputs>
							<input_0 size="8" storage="register">RSP</input_0>
							<input_1 size="8" storage="constant">0x8</input_1>
						</inputs>
					</pcode_1>
					<pcode_2>
						<name>RETURN</name>
						<inputs>
							<input_0 size="8" storage="register">RIP</input_0>
						</inputs>
					</pcode_2>
				</pcodes>
			</instruction_33>
		</instructions>
	</function>
	<function address="00400530" name="__libc_csu_fini">
		<basic_blocks>
			<block_0 end="00400530" start="00400530"/>
		</basic_blocks>
		<output type="undefined"/>
		<instructions>
			<instruction_0>RET
				<address>00400530</address>
				<pcodes>
					<pcode_0>
						<output size="8" storage="register">RIP</output>
						<name>LOAD</name>
						<inputs>
							<input_0 size="8" storage="constant">0x1b1</input_0>
							<input_1 size="8" storage="register">RSP</input_1></inputs>
					</pcode_0>
					<pcode_1>
						<output size="8" storage="register">RSP</output>
						<name>INT_ADD</name>
						<inputs>
							<input_0 size="8" storage="register">RSP</input_0>
							<input_1 size="8" storage="constant">0x8</input_1>
						</inputs>
					</pcode_1>
					<pcode_2>
						<name>RETURN</name>
						<inputs>
							<input_0 size="8" storage="register">RIP</input_0>
						</inputs>
					</pcode_2>
				</pcodes>
			</instruction_0>
		</instructions>
	</function>
	<function address="00400534" name="_fini">
		<basic_blocks>
			<block_0 end="0040053c" start="00400534"/>
		</basic_blocks>
		<output type="undefined"/>
		<instructions>
			<instruction_0>SUB RSP,0x8
				<address>00400534</address>
				<pcodes>
					<pcode_0>
						<output size="1" storage="register">CF</output>
						<name>INT_LESS</name>
						<inputs>
							<input_0 size="8" storage="register">RSP</input_0>
							<input_1 size="8" storage="constant">0x8</input_1></inputs>
					</pcode_0>
					<pcode_1>
						<output size="1" storage="register">OF</output>
						<name>INT_SBORROW</name>
						<inputs>
							<input_0 size="8" storage="register">RSP</input_0>
							<input_1 size="8" storage="constant">0x8</input_1>
						</inputs>
					</pcode_1>
					<pcode_2>
						<output size="8" storage="register">RSP</output>
						<name>INT_SUB</name>
						<inputs>
							<input_0 size="8" storage="register">RSP</input_0>
							<input_1 size="8" storage="constant">0x8</input_1>
						</inputs>
					</pcode_2>
					<pcode_3>
						<output size="1" storage="register">SF</output>
						<name>INT_SLESS</name>
						<inputs>
							<input_0 size="8" storage="register">RSP</input_0>
							<input_1 size="8" storage="constant">0x0</input_1>
						</inputs>
					</pcode_3>
					<pcode_4>
						<output size="1" storage="register">ZF</output>
						<name>INT_EQUAL</name>
						<inputs>
							<input_0 size="8" storage="register">RSP</input_0>
							<input_1 size="8" storage="constant">0x0</input_1>
						</inputs>
					</pcode_4>
				</pcodes>
			</instruction_0>
			<instruction_1>ADD RSP,0x8
				<address>00400538</address>
				<pcodes>
					<pcode_0>
						<output size="1" storage="register">CF</output>
						<name>INT_CARRY</name>
						<inputs>
							<input_0 size="8" storage="register">RSP</input_0>
							<input_1 size="8" storage="constant">0x8</input_1></inputs>
					</pcode_0>
					<pcode_1>
						<output size="1" storage="register">OF</output>
						<name>INT_SCARRY</name>
						<inputs>
							<input_0 size="8" storage="register">RSP</input_0>
							<input_1 size="8" storage="constant">0x8</input_1>
						</inputs>
					</pcode_1>
					<pcode_2>
						<output size="8" storage="register">RSP</output>
						<name>INT_ADD</name>
						<inputs>
							<input_0 size="8" storage="register">RSP</input_0>
							<input_1 size="8" storage="constant">0x8</input_1>
						</inputs>
					</pcode_2>
					<pcode_3>
						<output size="1" storage="register">SF</output>
						<name>INT_SLESS</name>
						<inputs>
							<input_0 size="8" storage="register">RSP</input_0>
							<input_1 size="8" storage="constant">0x0</input_1>
						</inputs>
					</pcode_3>
					<pcode_4>
						<output size="1" storage="register">ZF</output>
						<name>INT_EQUAL</name>
						<inputs>
							<input_0 size="8" storage="register">RSP</input_0>
							<input_1 size="8" storage="constant">0x0</input_1>
						</inputs>
					</pcode_4>
				</pcodes>
			</instruction_1>
			<instruction_2>RET
				<address>0040053c</address>
				<pcodes>
					<pcode_0>
						<output size="8" storage="register">RIP</output>
						<name>LOAD</name>
						<inputs>
							<input_0 size="8" storage="constant">0x1b1</input_0>
							<input_1 size="8" storage="register">RSP</input_1></inputs>
					</pcode_0>
					<pcode_1>
						<output size="8" storage="register">RSP</output>
						<name>INT_ADD</name>
						<inputs>
							<input_0 size="8" storage="register">RSP</input_0>
							<input_1 size="8" storage="constant">0x8</input_1>
						</inputs>
					</pcode_1>
					<pcode_2>
						<name>RETURN</name>
						<inputs>
							<input_0 size="8" storage="register">RIP</input_0>
						</inputs>
					</pcode_2>
				</pcodes>
			</instruction_2>
		</instructions>
	</function>
	<function name="__libc_start_main">
		<basic_blocks>
			<block_0 end="00602000" start="00602000"/>
		</basic_blocks>
		<output type="undefined"/>
		<instructions/>
	</function>
	<function name="__gmon_start__">
		<basic_blocks>
			<block_0 end="00602008" start="00602008"/>
		</basic_blocks>
		<output type="undefined"/>
		<instructions/>
	</function>
</program>